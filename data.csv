name,id,fastest,shortest,total,acc,difficulty_x,category_x,link,text,difficulty_y,category_y,cpu_time,memory_limit,sample_input,sample_output
Emoticons,emoticons2,0.0,251,592,170,4.6,Medium,https://open.kattis.com/problems/emoticons2,"Emma is a college student who regularly posts messages on
    her favorite social media, which supports several emoticons—a
    pictorial representation of a facial expression using
    characters. One day, she noticed that some emoticons in her
    message were automatically converted to the corresponding
    emojis by the platform. For example, if she sends a message
    “Hello ;-)” to the platform, the
    actual post will be “Hello ”. If two or more emoticons
    overlap in a message, the system always converts the leftmost
    emoticon first.
Here is the complete list of the supported emoticons on that
    social media.



Type


Emoticon


Emoji


Meaning




Western


:)





Smiley




Western


:-)





Smiley




Western


:-(





Frown




Western


;-)





Wink




Western


xD





Laughing




Eastern


^_^





Smiley




Eastern


-_-





Expressionless




Eastern


^o^





Screwed




Eastern


^^;





Sweating




Eastern


(..)





Looking down



She always uses the following “visible” characters and the
    space character “ ”.


Digits: 0123456789


Uppercase letters: ABCDEFGHIJKLMNOPQRSTUVWXYZ


Lowercase letters: abcdefghijklmnopqrstuvwxyz


Symbols: !""#$%&'()*+,-./:;<=>?@[\]^_`{|}~


Today, just before posting, she accidentally replaced all
    occurrences of one character in her message with another
    character. Such characters include space, and she might have
    replaced a character with the same character, causing no
    effect. Now, she wants to know the message length after the
    platform converts emoticons into emojis, where she counts each
    emoji as one character.
Can you help her find the minimum and maximum possible
    message lengths?
Input
The input contains Emma’s original text (before she
    accidentally replaced characters) on one line. The text
    contains at most $100$
    characters, consisting of the visible ASCII characters defined
    above and the space character. Her text is not empty, and its
    first and last characters are visible characters.
Output
Output two integers, the minimum and the maximum possible
    message lengths after emoticons in her message are converted
    into emojis.


Sample Input 1
Sample Output 1



Hello ;-) world ^^.



15 19






Sample Input 2
Sample Output 2



xDEoE_E



4 7",4.6,Medium,3 seconds,1024 MB,,
Association for Control Over Minds,control,0.02,159,4501,1420,4.3,Medium,https://open.kattis.com/problems/control,"You are the boss of ACM
    (Association for Control over Minds), an upstanding company
    with a single goal of world domination.
Yesterday, you woke up, and saw that the weather was clear,
    and the birds were singing. “Another day, another world
    domination plan”, you sang to yourself as you devised your next
    world domination plan involving the illusory mind control
    potions.
There’s only one insignificant problem you have to solve
    before you can execute this perfection of a plan: you don’t
    know the correct recipe for the mind control potion. You asked
    the local Panda-breed brewmaster for the recipe, but
    unfortunately he didn’t know either. Instead, he gave you the
    mysterious tome titled The Root of all
    Evil (written by Halim the White). You read the evil
    book under candle light, and wrote down all the potion recipes
    contained inside the book. “One of them must be the formula for
    the mind control potion, I’m sure of it!”, you said to
    yourself. You numbered these recipes from $1$ through $N$. “I just need to try concocting
    all of these recipes!”, you hummed to yourself.
Today, you woke up, and saw that the weather was clear,
    and…, anyway. You have purchased all the utensils and
    ingredients from the local grocery — onion, carrot, broom,
    vials, cauldrons, bat wings, …, all common grocery items. Now,
    you are ready to begin your experiments, but then you notice
    that some of the recipes share common ingredients!
    Unfortunately, you only bought one of each ingredient with you.
    “Oh no! What should I do now?!”, you panicked.
“I’ll just create some of the potions today, and do the
    remaining ones later.”, you resolved. You consider all your
    recipes one by one in order by their number from recipe
    $1$ through recipe
    $N$. For each recipe, if
    you are not able to concoct this potion (explained in the next
    paragraph), you skip this recipe, and consider the next one, if
    any. Otherwise, even though it may cause some of the next
    potions to no longer be concoctable, you concoct this recipe.
    Thus, whether to concoct a potion is not a choice. It’s simply
    determined by whether it is possible or not to do so when you
    consider the potion.
In order to concoct a potion, you first prepare a new empty
    cauldron (you managed to procure an infinite number of
    cauldrons from the grocery store). Then, you combine all of the
    ingredients required for this potion and nothing else in this
    cauldron (that is, the cauldron cannot contain any ingredients
    not listed in the recipe). For the ingredients that have not
    been used for any of the previous potions that you’ve decided
    to concoct, you can simply put it into this cauldron. You can
    also pour the entire content of the cauldron used for one of
    your previous concoctions into this cauldron, thus mixing in
    all of the ingredients contained inside the cauldron (since you
    pour all of the content of the cauldron, this previous
    concoction can no longer be used for any of your next
    concoctions). Finally, you stir this cauldron with your broom
    and take a vial of the concoction to test on your minions
    later. The remaining concoction remains in this cauldron, and
    can be poured into another cauldron later.
“What is the number of recipes you will concoct this way
    today?”, you asked yourself.
Input
The first line contains a non-negative integer $2 \leq N \leq 200\, 000$, giving the
    total number of recipes you have. Thereafter follow
    $N$ lines, the
    $i$-th line describes
    recipe number $i$. Each of
    these lines is a single space separated list of integers. Each
    of these lines begins with an integer $1 \leq M$, denoting the number of
    ingredients required to make this recipe. Then, $M$ integers follow, describing the
    required ingredients. The ingredients are identified by
    integers between $0$ and
    $500\, 000$, inclusively,
    with different integers denoting different ingredients. For
    each recipe, all of its ingredients will be distinct. The sum
    of $M$ over all recipes
    will be no greater than $500\,
    000$.
Output
Print the number of recipes you will concoct.
Sample Data Explanation
In the first example, the first potion can be concocted,
    since both ingredients were not used so far. Thus, you will
    concoct this potion. The second potion will also be concocted
    for the same reason. The third potion cannot be concocted,
    since ingredient $1$ is no
    longer present, and is inside a cauldron mixed with another
    ingredient not present in the recipe. The fourth potion can be
    concocted by pouring the content of the cauldrons used for the
    first and second concoctions, and then adding ingredient
    $5$, which has remained
    unused so far. The last potion cannot be concocted, since the
    content of the cauldron for the first potion has all been
    poured when making the fourth potion and thus is now mixed with
    other ingredients not present in the recipe.
For the second example, since the first potion can be
    concocted, it has to be concocted. Thus, the second and third
    potions can no longer be concocted.


Sample Input 1
Sample Output 1




5
2 1 2
2 3 4
2 1 5
5 1 2 3 4 5
2 1 2




3






Sample Input 2
Sample Output 2




3
2 1 2
1 1
1 2




1",4.3,Medium,4 seconds,1024 MB,,
Snapper Chain (Easy),snappereasy,0.0,5,1905,935,2.6,Easy,https://open.kattis.com/problems/snappereasy,"Note that this is an easier version of the problem
    snapperhard
The Snapper is a clever little device that, on one
    side, plugs its input plug into an output socket, and, on the
    other side, exposes an output socket for plugging in a light or
    other device.
When a Snapper is in the ON state and is receiving
    power from its input plug, then the device connected to its
    output socket is receiving power as well. When you snap your
    fingers – making a clicking sound – any Snapper
    receiving power at the time of the snap toggles between the ON
    and OFF states.
In hopes of destroying the universe by means of a
    singularity, I have purchased $N$ Snapper devices and
    chained them together by plugging the first one into a power
    socket, the second one into the first one, and so on. The light
    is plugged into the $N$th
    Snapper.
Initially, all the Snappers are in the OFF state,
    so only the first one is receiving power from the socket, and
    the light is off. I snap my fingers once, which toggles the
    first Snapper into the ON state and gives power to the
    second one. I snap my fingers again, which toggles both
    Snappers and then promptly cuts power off from the
    second one, leaving it in the ON state, but with no power. I
    snap my fingers the third time, which toggles the first
    Snapper again and gives power to the second one. Now
    both Snappers are in the ON state, and if my light is
    plugged into the second Snapper it will be
    on.
I keep doing this for hours. Will the light be on
    or off after I have snapped my fingers $K$ times? The light is on if
    and only if it’s receiving power from the Snapper it’s
    plugged into.
Input
The first line of the input gives the number of test cases,
    $T$. $T$ lines follow. Each one contains
    two integers, $N$ and
    $K$.
You may assume that $1 \leq T
    \leq 10\, 000$, $1 \leq N
    \leq 10$ and $0 \leq K
    \leq 100$.
Output
For each test case, output one line containing “Case
    #$x$: $y$”, where $x$ is the case number (starting from
    1) and $y$ is either ""ON""
    or ""OFF"", indicating the state of the light bulb.


Sample Input 1
Sample Output 1




4
1 0
1 1
4 0
4 47




Case #1: OFF
Case #2: ON
Case #3: OFF
Case #4: ON",2.6,Easy,1 second,1024 MB,,
Frosh Week,froshweek2,0.01,5,3437,1772,2.2,Easy,https://open.kattis.com/problems/froshweek2,"Professor Zac is trying to finish a collection of tasks
    during the first week at the start of the term. He knows
    precisely how long each task will take, down to the
    millisecond. Unfortunately, it is also Frosh Week. Zac’s office
    window has a clear view of the stage where loud music is
    played. He cannot focus on any task when music is blaring.
The event organizers are also very precise. They supply Zac
    with intervals of time when music will not be playing. These
    intervals are specified by their start and end times down to
    the millisecond.
Each task that Zac completes must be completed in one quiet
    interval. He cannot pause working on a task when music plays
    (he loses his train of thought). Interstingly, the lengths of
    the tasks and quiet intervals are such that it is impossible to
    finish more than one task per quiet interval!
Given a list of times $t_
    i$ (in milliseconds) that each task will take and a list
    of times $\ell _ j$ (in
    milliseconds) specifying the lengths of the intervals when no
    music is being played, what is the maximum number of tasks that
    Zac can complete?
Input
The first line of input contains a pair of integers
    $n$ and $m$, where $n$ is the number of tasks and
    $m$ is the number of time
    intervals when no music is played. The second line consists of
    a list of integers $t_1, t_2,
    \ldots , t_ n$ indicating the length of time of each
    task. The final line consists of a list of times $\ell _1, \ell _2, \ldots , \ell _ m$
    indicating the length of time of each quiet interval when Zac
    is at work this week.
You may assume that $1 \leq
    n,m \leq 200\, 000$ and $100\, 000 \leq t_ i, \ell _ j \leq 199\,
    999$ for each task $i$ and each quiet interval
    $j$.
Output
Output consists of a single line containing a single integer
    indicating the number of tasks that Zac can accomplish from his
    list during this first week.


Sample Input 1
Sample Output 1




5 4
150000 100000 160000 100000 180000
190000 170000 140000 160000




4






Sample Input 2
Sample Output 2




4 4
180000 185000 199999 100000
199999 180000 170000 120000




3






Sample Input 3
Sample Output 3




3 3
199999 180000 170001
199999 170000 180000




2",2.2,Easy,3 seconds,1024 MB,,
99 Problems,99problems2,0.11,231,5511,4897,4.5,Medium,https://open.kattis.com/problems/99problems2,"You’re creating problems for competitive
    programming practical examination, but you’re told your
    problems are either too hard or too easy. Fortunately, you’ve
    got 99 problems and coming up with more ain’t one. To decide on
    suitable problems, you will discard problems based on their
    difficulty.
After coming up with $N$ problems of difficulty
    $D_ i$, you will be told
    to discard either


The easiest problem strictly harder
        than difficulty $D$. If you have problems of
        difficulties $[10, 10,
        11]$ and students find $D = 10$ too hard, you will
        discard $D_ i = 11$ to
        get $[10, 10]$.


The hardest problem not harder
        than difficulty $D$. If you have problems of
        difficulties $[10, 10,
        11]$ and students find $D = 10$ too easy, you will
        discard the last $D_ i =
        10$ to get $[10,
        11]$.


Input
The first line contains two integers $N$ ($1
    \le N \le 5 \times 10^5$) and $Q$ ($1
    \le Q \le 10^5$).
The next line contains $N$ integers of $D_ i$ ($1 \le D_ i \le 10^9$), the
    difficulties of the $N$
    problems you came up with.
The next $Q$ lines
    contain two integers $T$
    ($1$ or $2$) and $D$ ($1
    \le D \le 10^9$). $T$ corresponds to discarding problems
    strictly harder than ($1$) or not harder
    than ($2$)
    $D$.
Output
For each problem discarded, print the difficulty
    $D_ i$ of the problem on a
    new line. If a problem of the required difficulty does not
    exist or was previously discarded, print $-1$.
Subtasks


($1$ Points): Sample Input.


($18$ Points): $N \le 10^4$, $Q \le 10^4$, $D \le 10^3$ and $T = 1$.


($22$ Points): $N \le 10^4$, $Q \le 10^4$ and $D_ i \le 10^3$.


($19$ Points): $Q \le 10^4$ and $D_ i \le 10^3$.


($25$ Points): $Q \le 10^4$ and $D_ i$ are unique.


($15$ Points): No additional
        constraints.


Warning
The I/O files are large. Please use fast I/O methods.


Sample Input 1
Sample Output 1



3 4
10 10 11
1 10
1 10
1 9
1 5



11
-1
10
10






Sample Input 2
Sample Output 2



3 4
10 10 11
2 10
2 10
2 10
2 15



10
10
-1
11",4.5,Medium,1 second,1024 MB,,
Gem Island,gemisland,0.02,574,336,87,6.2,Hard,https://open.kattis.com/problems/gemisland,"Gem Island is a tiny island in the middle of the Pacific
    Ocean. Until recently, it was known as one of the poorest, but
    also most peaceful, places on Earth. Today, it is neither poor
    nor peaceful. What happened?
One sunny morning, not too long ago, all inhabitants of Gem
    Island woke up to a surprise. That morning, each of them
    suddenly held one sparkling gem in their hand. The gems had
    magically appeared overnight. This was cause for much rejoicing
    – everybody was suddenly rich, they could finally afford all
    the things they had ever dreamed of, and the name of their
    island made so much more sense now.
The next morning, one of the inhabitants woke up to another
    surprise – her gem had magically split into two gems! The same
    thing happened on each of the following nights, when exactly
    one of the gems (apparently uniformly at random among all the
    gems on the island) would split into two.
After a while, the inhabitants of Gem Island possessed a
    widely varying number of gems. Some had a lot and many had only
    a few. How come some inhabitants had more gems than others? Did
    they cheat, were they just lucky, or was something else at
    work?
The island elders have asked for your help. They want you to
    determine if the uneven distribution of gems is explained by
    pure chance. If so, that would greatly reduce tensions on the
    island.
The island has $n$
    inhabitants. You are to determine the gem distribution after
    $d$ nights of gem
    splitting. In particular, you are interested in the expected
    number of gems collectively held by the $r$ people with the largest numbers of
    gems. More formally, suppose that after $d$ nights the numbers of gems held by
    the $n$ inhabitants are
    listed in non-increasing order as $a_1 \ge a_2 \ge \ldots \ge a_ n$.
    What is the expected value of $a_1 + \dots + a_ r$?
Input
The input consists of a single line containing the three
    integers $n$, $d$, and $r$ ($1
    \leq n, d \leq 500$, $1
    \leq r \leq n$), as described in the problem statement
    above.
Output
Display the expected number of gems that the top
    $r$ inhabitants hold after
    $d$ nights, with an
    absolute or relative error of at most $10^{-6}$.


Sample Input 1
Sample Output 1



2 3 1



3.5






Sample Input 2
Sample Output 2



3 3 2



4.9






Sample Input 3
Sample Output 3



5 10 3



12.2567433",6.2,Hard,2 seconds,2048 MB,,
Railroad Map,railroad,0.0,926,943,201,7.3,Hard,https://open.kattis.com/problems/railroad,"The Slovak national railroad company has recently built new
    tracks. They want to update their railroad map according to
    these changes. But they want the map to be as simple as
    possible. So they decided to remove from the map all the
    stations that have exactly two other direct connections to
    other stations (i.e., a single railroad passing through the
    station).
You will be given the complete map of Slovak railroads. It
    consists of railway stations numbered from 1 to $N$, and railroad segments between
    some pairs of these stations. For each railroad segment we are
    given its length. Your task is to remove all such stations that
    are directly connected with exactly two other stations, and
    output the new map. The new map must contain correct distances
    between the remaining stations.
Input
The first line of the input file contains an integer
    $T\leq 10$ specifying the
    number of test cases. Each test case is preceded by a blank
    line.
Each test case begins with a line with two integers
    $N$ and $M$, $1\leq N\leq 10\, 000, 1\leq M\leq 30\,
    000$. The number $N$ denotes the number of stations and
    $M$ is the number of
    railroad segments. $M$
    lines follow, each with 3 integers $a, b$, and $c$ ($1\leq a, b\leq N$) specifying that
    there is a railroad segment of length $c$ connecting stations $a$ and $b$.
You can assume that in each test case there is a path
    between every two stations. Also, there will always be at least
    2 stations that are not directly connected to exactly two other
    stations.
Output
For each test case, the output shall consist of multiple
    lines. The first line shall contain a positive integer
    $K$ – the number of
    railroads on the simplified map. Each of the next $K$ lines shall contain three integers
    $a, b$, and $c$ stating that there is a railroad
    of length $c$ between
    stations $a$ and
    $b$ on the simplified
    map.
Print a blank line between outputs for different test
    cases.


Sample Input 1
Sample Output 1




2

3 2
1 2 1
2 3 1

4 4
1 2 1
2 3 2
3 4 3
4 2 1




1
1 3 2

2
1 2 1
2 2 6",7.3,Hard,1 second,1024 MB,,
Cut the Negativity,cutthenegativity,0.0,5,3296,1773,1.4,Easy,https://open.kattis.com/problems/cutthenegativity,"Image by 
        Pattarisara Suvichanarakul (iStock); Used under license
      

An airline tracks costs of flights between $n$ different cities in a table. The
    cities are numbered from $1$ to $n$. In the table, the entry in
    $\textrm{row}~ i$ and
    $\textrm{column}~ j$
    represents the cost of a direct flight from $\textrm{city}~ i$ to $\textrm{city}~ j$. However, if there
    is no direct flight between these two cities, then a value of
    $-1$ is displayed in the
    table. A manager for the airline has decided that the table is
    too hard to read with all the $-1$ values; she does not like all the
    negativity. Instead, she would prefer a list of the flight
    prices for just the cities for which there are direct flights.
    Each entry in the list should specify the city from which the
    flight departs, the city at which the flight lands, and the
    price for the flight. The list should be sorted in increasing
    order by departure city, and if there is more than one flight
    departing from a city, then ties should be broken by the
    arrival city in increasing order. For example, the table on the
    left below should be turned into the list on the right. This
    matches the first sample input/output.



Input
The first line of input consists of an integer, $n$ ($2
    \leq n \leq 100$), the number of cities. This is
    followed by $n$ lines,
    each consisting of $n$
    space-separated integers, where the $j^{\text {th}}$ value on the
    $i^{\text {th}}$ line
    indicates the cost of the flight from $\textrm{city}~ i$ to $\textrm{city}~ j$. A value of
    $-1$ is used to indicate
    that there is no direct flight from $\textrm{city}~ i$ to $\textrm{city}~ j$. It is guaranteed
    that there is no direct flight departing from and arriving at
    the same city. All costs will be strictly positive integers
    less than $10\, 000$. It
    is guaranteed that there will be at least one direct flight
    represented in the table.
Output
The first line of output is the number of direct flights,
    $m$. This is to be
    followed by $m$ lines of
    the form $u$ $v$ $c$, indicating that there is a
    direct flight from $\textrm{city}~ u$ to $\textrm{city}~ v$ with a cost of
    $\textrm{of}~ c$. These
    must be printed in ascending order, sorted by departure city
    number with ties broken by the arrival city number.


Sample Input 1
Sample Output 1



4
-1 1 -1 2
9 -1 -1 -1
-1 3 -1 4
7 1 2 -1



8
1 2 1
1 4 2
2 1 9
3 2 3
3 4 4
4 1 7
4 2 1
4 3 2







Sample Input 2
Sample Output 2



3
-1 -1 -1
15 -1 -1
2 2 -1



3
2 1 15
3 1 2
3 2 2",1.4,Easy,1 second,1024 MB,,
Toggi,toggi,0.0,120,385,229,2.7,Easy,https://open.kattis.com/problems/toggi,"Toggi loves the number $\pi
    $. Toggi quite likes making his computer calulate
    $\pi $ but that can take
    quite a long time, depends a bit on the number of digits he
    wants to calculate. If he calculates the first $n$ digits of $\pi $ it takes $n \log _{10}(n) / 10^6$ seconds,
    where $\log _{10}$ denotes
    a logarithm of base $10$.
    He wants to know to how many digits of $\pi $ he can calculate in the time he
    has. Help him find out.
Input
You are given an integer $C$, the number of seconds Toggi
    has.
Output
One line containing the integer $n$, the maximum number of digits of
    $\pi $ that Toggi can
    calculate in $C$
    seconds.
Explanation of Sample Inputs
Toggi can calculate $189481$ digits in one second
    because\[ 189481 \log
    _{10}(189481) / 10^6 \approx 0.9999984203540794 \leq 1
    \]
But he can’t calculate more digits in a single seond
    beause\[ 189482 \log
    _{10}(189482) / 10^6 \approx 1.0000041322153754 > 1
    \]
Scoring
The solution will be tested on input data of varying
    difficulty and the data is divided into groups as shown in the
    table below. The solution will then be scored according to how
    many groups are solved.



Group


Points


Constraints




1


10


$ 1 \le C \leq
          5$




2


20


$ 1 \le C \leq
          50$




3


30


$ 1 \le C \leq
          2000$




4


20


$ 1 \le C \leq
          10^4$




5


20


$ 1 \le C \leq
          10^9$





Sample Input 1
Sample Output 1



1



189481",2.7,Easy,1 second,1024 MB,,
Videopoker,videopoker,0.04,2535,62,27,6.8,Hard,https://open.kattis.com/problems/videopoker,"Videopoker is the slot machine variant of the currently
    immensely popular game of poker. It is a variant on draw poker.
    In this game the player gets a hand consisting of five cards
    randomly drawn from a standard $52$-card deck. From this hand, the
    player may discard any number of cards (between $0$ and $5$, inclusive), and change them for
    new cards randomly drawn from the remainder of the deck. After
    that, the hand is evaluated and the player is rewarded
    according to a payout structure. A common payout structure is
    as follows:




hand


payout




one pair


1




two pairs


2




three of a kind


3




straight


4




flush


5




full house


10




four of a kind


25




straight flush


100




royal flush


250




Once you know the payout structure, you can determine for a
    given hand which cards you must change to maximize your
    expected reward. We’d like to know this expected reward, given
    a hand.
Input


One line with nine integers $x_ i$ ($0 \le x_ i \le 1\, 000$)
        describing the payout structure. The numbers are in
        increasing order and describe the payout for one pair, two
        pairs, etc, until the royal flush.


One line with one integer $n$ ($1 \le n \le 10$): the number of
        starting hands to follow.


$n$ lines, each
        describing a starting hand. A hand consists of five space
        separated tokens of the form Xs,
        with X being the rank
        (‘2’ ‘9’, ‘T’,
        ‘J’, ‘Q’, ‘K’ or
        ‘A’) and s being the suit (‘c’, ‘d’,
        ‘h’ or ‘s’).


Output
One line for each starting hand with a real number that is
    the maximal expected reward for that hand. These numbers must
    have an absolute or relative error less than $10^{-6}$.
Poker hand rankings
For those of you not familiar with the game of poker, here
    follow explanations of the different poker hand rankings:


“one pair”consists of two cards of the same rank and
        three unmatched cards, e.g. Ah As Tc 8h 2c;


“two pairs” consists of two cards of the same rank, two
        cards of a different same rank and an unmatched card,
        e.g. Ah As Th Ts 3c;


“three of a kind” consists of three cards of the same
        rank and two unmatched cards, e.g. Kc Kh Ks 6c 5s;


a “straight” consists of five cards of sequential rank
        in more than one suit, e.g. Jd Ts 9c 8d 7h. The ace
        can be used as low or high card, so straights from ace to
        five and from ten to ace can be formed;


a “flush” consists of five cards of the same suit, that
        are not in sequential rank, e.g. Ks Qs 8s 5s 3s;


a “full house” consists of three cards of the same rank
        and two cards of a different same rank, e.g. Js Jh Jc
        4s 4c;


“four of a kind” consists of four cards of the same rank
        and an unmatched card, e.g. 7h 7c 7s 7d 5c;


a “straight flush” consists of five cards that form both
        a straight and a flush and that is not a royal flush,
        e.g. 7h 6h 5h 4h 3h;


a “royal flush” consists of five cards that form both a
        straight from ten to ace and a flush, e.g. As Ks Qs Js
        Ts.




Sample Input 1
Sample Output 1




1 2 3 4 5 10 25 100 250
5
Ah Ac Ad As 2s
Ks Qs Js Ts 2h
Ks Qs 2d 2h 3s
2d 4h 5d 3c 9c
2h 3h 6d 8h Tc




25.000000
8.9574468
1.5467160
0.9361702
0.6608135",6.8,Hard,3 seconds,1024 MB,,
Splitting Pairs,splittingpairs,0.0,217,201,82,5.7,Hard,https://open.kattis.com/problems/splittingpairs,"Alice and Bob are playing a modified game of Nim. Initially,
    there are some non-empty piles of stones in front of them. They
    take turns, and Alice takes the first turn.
On a single turn, a player must do the following actions in
    order:


Remove some number of piles of stones — at least one but
        no more than half the number of piles.


Choose the same number of piles of remaining stones, and
        split each of those piles into two non-empty piles.


Notice that after each valid move, there should be the same
    number of non-empty piles of stones as at the start of the
    game. A player who cannot perform all the actions on their turn
    loses the game.
You are given many games, and for each one, you’d like to
    determine who would win if both players play optimally.
Input
The first line of input contains an integer $t$ ($1
    \leq t \leq 1\, 000$), which is the number of games
    Alice and Bob play.
Each game is represented on two lines. The first line of
    each game contains an integer $n$ ($2
    \leq n \leq 50$), which is the number of piles of
    stones.
The next line of the game contains $n$ space-separated integers
    $s$ ($1 \leq s \leq 10^{12}$), which are
    the number of stones in each pile.
Output
Output $t$ lines. For
    each game, output a single line with a single integer, which is
    $1$ if Alice wins and
    $0$ if Bob wins. Assume
    Alice takes the first turn, and both players play optimally.
    Output the game results in the order the games appear in the
    input.


Sample Input 1
Sample Output 1



4
3
1 1 1
3
1 1 2
3
2 2 2
4
4 4 4 4



0
1
0
1",5.7,Hard,1 second,2048 MB,,
Geimskip,geimskip,0.0,507,140,103,4.0,Medium,https://open.kattis.com/problems/geimskip,"“A long time ago, in a galaxy far, far away…”
The rebels have finally found the location of the new Death
    Star and hope to perform an all out attack under the leadership
    of General Gial Ackbar. Ackbar has committed all of their
    ships, the ships being MC80 starships, CR90 corvettes, Dornic
    attack ships, YT-2400 light frigates and various smaller attack
    ships like T-65B X-wings.
What General Ackbar doesn’t know is that Han Solo and his
    team died in an unsuccessful attempt to destroy the energy core
    of the protective shield. Furthermore Admiral Piett has set up
    a trap so the Empire can be rid of the rebels once and for all.
    This well planned trap consists of explosives that the admiral
    has placed at the locations where the rebel fleet comes out of
    their hyperjumps.
Since General Ackbar had a mild stroke when he discovered
    the trap, he’s incapable of assessing the damage to the fleet.
    Can you help him?
Input
The first line of the input contains one integer
    $N$. On the next
    $N$ lines thare are
    descriptions of the ships in the rebel fleet where the
    $i$-th line contains four
    integers $x_i,y_i,z_i$ and
    $r_i$. The first three
    numbers $(x_i,y_i,z_i)$
    denote the position of the $i$-th ship in three-dimensional space
    and $r_i$ is its explosive
    radius. Next there is a line containing a single integer
    $M$. On the next
    $M$ lines are descriptions
    of the admiral’s bombs where the $j$-th line contains four integers
    $x_j,y_j,z_j$ and
    $r_j$. The first three
    integers $(x_j,y_j,z_j)$
    denote the location of the $j$-th bomb in three-dimensional space
    and $r_j$ is its explosive
    radius. You may assume no two ships intersect.
Output
Print a single integer $k$, the number of ships in the rebel
    sheep that survive the trap.
Explanation of Sample Inputs




Figure 1: Image of the spaceship and the two bombs
          in sample 1, drawn as spheres in three-dimensional space.
        


The first sample contains one spaceship, located at
    $(0,0,0)$ and having
    radius $3$, and two bombs.
    The first bomb is located at $(2,3-3)$ and has explosive radius
    $3$. The second bomb is
    located at $(-2,2,2)$ and
    has explosive radius $2$.
    As can be seen on the image the first bomb has no effect on the
    ship but the second is powerful enough to blow up the
    spaceship. Thus the output is $0$ since no ship survived.
In the second sample no ships and bombs intersect, so the
    only ship survives.
In the last input the fourth bomb causes the second ship to
    explode. That causes a chain reaction making the first ship
    explode as well, so no ship survives.
Scoring



Group


Points


Constraints




1


10


$N = 1,\, 0 \leq M \leq
          10,\, -100 \leq x_i,y_i,z_i \leq 100,\, 1 \leq r \leq
          10$




2


10


$N = 1,\, 0 \leq M \leq
          10^3,\, -100 \leq x_i,y_i,z_i \leq 100,\, 1 \leq r \leq
          10$




3


25


$0 \leq N,M \leq 10^3,\,
          -100 \leq x_i,y_i,z_i \leq 100,\, 1 \leq r \leq
          10$, no chain reactions




4


25


$0 \leq N,M \leq 10^3,\,
          -100 \leq x_i,y_i,z_i \leq 100,\, 1 \leq r \leq
          10$




5


30


$0 \leq N,M \leq 10^3,\,
          -10^4 \leq x_i,y_i,z_i \leq 10^4,\, 1 \leq r \leq
          10^3$





Sample Input 1
Sample Output 1



1
0 0 0 3
2
2 3 -3 1
-2 2 2 2



0






Sample Input 2
Sample Output 2



1
0 0 0 3
3
2 3 -3 1
-2 2 6 3
1 -5 -2 2



1






Sample Input 3
Sample Output 3



2
0 0 0 3
7 -2 4 4
4
2 3 -3 1
-2 2 6 3
1 -5 -2 2
4 -3 6 2



0",4.0,Medium,1 second,1024 MB,,
Digit Sum,siffersumma,0.0,242,160,122,4.9,Medium,https://open.kattis.com/problems/siffersumma,"Given an integer N, find the smallest integer with the same
    digit sum which is greater than N.
The digit sum of an integer is the sum of its digits, For
    exempel, the digit sum of $9550$ is $9 + 5 + 5 + 0 = 19$ and the digit sum
    of $999$ is $9 + 9 + 9 = 27$.
Input
An integer, N.
Output
Output the smallets integer greater than N with the same
    digit sum as N.
Scoring



Group


Points


Limits




1


20


$1 \le N \le
          10$




2


20


$1 \le N \le
          100$




3


40


$1 \le N < 10\,
          000$




4


20


$1 \le N <
          10^{20}$





Sample Input 1
Sample Output 1



8



17






Sample Input 2
Sample Output 2



92



119






Sample Input 3
Sample Output 3



9550



9604






Sample Input 4
Sample Output 4



200



1001",4.9,Medium,1 second,1024 MB,,
Hills in Gothenburg,hillsingothenburg,0.03,551,183,78,3.7,Medium,https://open.kattis.com/problems/hillsingothenburg,"As most students are aware, Gothenburg somehow seems to have
    more roads going uphill than downhill, regardless of which way
    you’re going. The knowledge of this made Lazy Smurf feel even
    more hopeless when his bicycle broke down in the middle of the
    city, on his way to Smurfette. While the bicycle could ride
    fine downhill, the pedals were broken and he had to walk with
    the bicycle on the uphill roads. Now Lazy Smurf needs your help
    finding the path to Smurfette which makes him have to walk
    uphill the least.
As everyone knows, all of Gothenburg can be represented as a
    graph 1: $N$ spots (numbered from $1$ to $N$), and $M$ roads (each road going directly
    between two spots). Each spot in the city has a known height
    $h_ i$, and if there is a
    direct road between spot $i$ and $j$, the height difference
    $h_ i-h_ j$ is the uphill
    distance to walk (if it is positive). To minimize the amount
    Lazy Smurf has to walk with the bicycle, we want to find the
    path from his location to Smurfette’s which minimizes the total
    height difference for all roads between their locations,
    counting downhill and flat roads as $0$.
Input
The first line contains two numbers $N$ and $M$ with a space between them.
    $N$ is the number of spots
    in the city, and $M$ is
    the number of roads. $1 \le N, M
    \le 10^5$
On the second row, there are two numbers separated by a
    space. The first number is the spot where Lazy Smurf is
    located, the second is the spot where Smurfette is located.
On the third row, there are $N$ numbers separated by spaces. The
    numbers $h_ i$
    ($1 \le i \le N$)
    represent the height of the $i$th spot. It is always the case that
    $ -10^5 \le h_ i \le 10^5
    $.
On each of the following $M$ rows, there will be two numbers
    $i$ and $j$, meaning that there is a road
    between spot $i$ and spot
    $j$. $i \ne j$, and every road will be
    specified exactly once.
Output
Output one number, the minimum total uphill distance Lazy
    Smurf has to travel to get to Smurfette.
Notes
In sample one, the best path is to go 1-2-4, which has a total uphill distance of
    $1+0=1$. If you instead
    took the path 1-3-4, the total uphill
    distance would have been $0+2=2$.
In sample two, 1-7-6-5 is one
    example of a path with the minimal upphill distance of
    $0+4+3=7$. Another
    possibility with uphill distance $7$ is 1-7-4-5. An example of a path with a different
    uphill distance is 1-2-3-4-5, having
    an uphill distance of $0+3+0+6 =
    9$.
Samples


Sample Input 1
Sample Output 1



4 4
1 4
3 4 1 3
1 2
1 3
2 4
3 4



1






Sample Input 2
Sample Output 2



7 8
1 5
7 2 5 1 7 4 0
1 7
2 3
3 4
1 2
6 7
4 5
4 7
5 6



7",3.7,Medium,3 seconds,1024 MB,,
Impossible Prices,impossibleprices,0.0,361,525,102,7.8,Hard,https://open.kattis.com/problems/impossibleprices,"Image by 
        Ferenz (Shutterstock), Used under license
      

Dio’s parents have recently retired to a villa in Greece,
    leaving him in charge of the family business, a home decor
    store specializing in ancient pottery (and a proud member of
    ICPC, the International Consortium of Pottery Companies). Dio
    enjoys interacting with customers, and always experiences a
    sense of satisfaction when he makes a sale. In idle moments, he
    often finds himself thinking about recent transactions, and, in
    particular, about the specific prices that customers have paid.
    In the midst of such musings, it strikes him that some prices
    are actually impossible, i.e., there are prices
    (perfectly sensible-sounding prices) that no customer will ever
    end up paying. The reason is that although Dio has essentially
    unlimited discretion in choosing the amount written on the
    price tag attached to each item in his store, this is the
    pre-tax price, whereas the actual price that
    a customer pays for an item is the after-tax price.
    The difference between the two is what creates the possibility
    of impossible prices.
Because the monetary system in Dio’s country is based on
    dollars and cents, a price (pre-tax or after-tax) is
    always a positive real number with exactly two digits after the
    decimal point. The tax rate, $T$, which is expressed as a
    percentage, is fixed by the government. It follows that if
    $x$ is a pre-tax price,
    then the resulting after-tax price, $\mathrm{ATP}(x)$, is given
    by\[ \mathrm{ATP}(x) =
    \langle \, x (1 + T/100) \, \rangle \]
where $\langle \ \rangle
    $ means “round to the nearest cent.” For example, if
    $x = 2.24$ and the tax
    rate is $10\% $,
    then\[ \mathrm{ATP}(x) =
    \langle \, 2.24 (1 + 10/100) \, \rangle = \langle \, 2.24 \cdot
    1.1 \, \rangle = \langle \, 2.464 \, \rangle = 2.46 \]
However, if $x$ is
    increased by $1$ cent
    (the smallest possible increment), then $x = 2.25$ and\[ \mathrm{ATP}(x) = \langle \, 2.25 \cdot
    1.1 \, \rangle = \langle \, 2.475 \, \rangle = 2.48 \]
Notice that $2.47$ was
    skipped, i.e., $2.47$ is
    an impossible price when the tax rate is $10\% $.
Given a tax rate, $T$,
    and a closed interval $[A,
    B]$, where $A$ and
    $B$ are prices and
    $A \leq B$, help Dio
    determine how many prices in the interval are in fact
    impossible.
Rounding Rule: If $p$ is a price, then the real numbers
    that round to $p$ are
    exactly those that lie in the half-open interval $[p - 0.005, p + 0.005)$.
Input
The first line of input contains an integer, $N$ ($1 \leq N \leq
    100$), the number of test cases. This is followed
    by $N$ lines, one per test
    case, each of which contains three space-separated real
    numbers, $A$, $B$, and $T$, where $1 \leq A \leq B \leq 10^{12}$ and
    $0 \leq T \leq 100$. Every
    real number will have exactly two digits after the decimal
    point.
Output
For each test case, output a line containing a single
    integer: the number of impossible prices in the closed interval
    $[A, B]$ when the tax rate
    is $T$.


Sample Input 1
Sample Output 1



2
2.46 2.48 10.00
6.00 9.00 50.00



1
100",7.8,Hard,1 second,1024 MB,,
Food Processor,foodprocessor,0.01,382,781,175,5.0,Medium,https://open.kattis.com/problems/foodprocessor,"You have a food processor with a variety of blades that can
    be attached to it, as well as some food you would like to
    process into smaller pieces.
The food processor can have one blade attached at any time.
    Each blade processes food by reducing its average piece size at
    a particular exponential rate, but it also has a maximum
    average piece size requirement; if the average piece size of
    the food is too big for the blade, the food processor will get
    stuck. Given a starting average food piece size, a target
    average piece size, and a set of blades for your food
    processor, determine the minimum amount of processing time
    needed to process your food into the target average piece
    size.
Note that we only care about the time spent actively
    processing food; we do not track time spent switching out
    blades or loading/unloading the food processor.
Input
The first line of input contains three integers $s$, $t$, and $n$ ($1
    \le t < s \le 10^6, 1 \le n \le 10^5$), where
    $s$ is the starting
    average piece size, $t$ is
    the target average piece size, and $n$ is the number of blades.
Each of the next $n$
    lines contains two integers $m$ and $h$ ($1
    \le m, h \le 10^6$). These are the blades, where
    $m$ is the maximum average
    piece size of the blade and $h$ is the number of seconds the blade
    needs to halve the average piece size.
Output
Output a single number, which is the minimum amount of time
    in seconds needed to process the food to the target average
    piece size. If it is not possible to reach the target, output
    $-1$. Your answer should
    have a relative error of at most
    $10^{-5}$.


Sample Input 1
Sample Output 1



10 1 2
10 10
4 5



23.219281






Sample Input 2
Sample Output 2



10000 9999 1
10000 1



1.4427671804501932E-4",5.0,Medium,1 second,1024 MB,,
Hamiltonian Hypercube,hypercube,0.0,60,1795,739,3.4,Medium,https://open.kattis.com/problems/hypercube,"Hypercube graphs are fascinatingly regular, hence you have
    devoted a lot of time studying the mathematics related to them.
    The vertices of a hypercube graph of dimension $n$ are all binary strings of length
    $n$, and two vertices are
    connected if they differ in a single position. There are many
    interesting relationships between hypercube graphs and
    error-correcting code.
One such relationship concerns the $n$-bit Gray Code, which is an
    ordering of the binary strings of length $n$, defined recursively as follows.
    The sequence of words in the $n$-bit code first consists of the
    words of the $(n-1)$-bit
    code, each prepended by a $0$, followed by the same words in
    reverse order, each prepended by a $1$. The $1$-bit Gray Code just consists of a
    $0$ and a $1$. For example the $3$-bit Gray Code is the following
    sequence:\[
    000,001,011,010,110,111,101,100 \]
Now, the $n$-bit Gray
    Code forms a Hamiltonian path in the $n$-dimensional hypercube, i.e., a
    path that visits every vertex exactly once (see
    Figure 1).




Figure 1: The $3$-dimensional hypercube and
          the Hamiltonian path corresponding to the $3$-bit Gray Code.
        


You wonder how many vertices there are between the vertices
    $0^ n$ ($n$ zeros) and $1^ n$ ($n$ ones) on that path. Obviously it
    will be somewhere between $2^{n-1}-1$ and $2^ n-2$, since in general
    $0^ n$ is the first
    vertex, and $1^ n$ is
    somewhere in the second half of the path. After finding an
    elegant answer to this question you ask yourself whether you
    can generalise the answer by writing a program that can
    determine the number of vertices between two arbitrary vertices
    of the hypercube, in the path corresponding to the Gray
    Code.
Input
The input consists of a single line, containing:


one integer $n$
        ($1 \leq n \leq 60$),
        the dimension of the hypercube


two binary strings $a$ and $b$, both of length $n$, where $a$ appears before $b$ in the $n$-bit Gray Code.


Output
Output the number of code words between $a$ and $b$ in the $n$-bit Gray Code.


Sample Input 1
Sample Output 1




3 001 111




3






Sample Input 2
Sample Output 2




3 110 100




2",3.4,Medium,1 second,1024 MB,,
Grandpa Bernie,grandpabernie,0.03,124,9621,3651,2.7,Easy,https://open.kattis.com/problems/grandpabernie,"Over the years, Grandpa Bernie has traveled all over the
    world. He doesn’t travel that much anymore, but he loves to
    tell his grandchildren stories from all these trips. He’ll tell
    them the story from when he went to Israel for the first time,
    or when he went to Greece for the third time.
His memory works in a funny way. He can easily remember his
    $k$:th trip to a
    particular country, but he’ll have a hard time remembering in
    which year he went on that trip. Given a list of all the trips
    Grandpa Bernie went on, can you answer a number of queries
    asking in which year he went on his $k$:th trip to a particular
    country?
Input
The input consists of:


one line with one integer $n$ ($1 \leq n \leq 10^5$), the number
        of trips Grandpa Bernie went on;


$n$ lines each
        containing the name $s$ ($1 \leq |s| \leq 20$) of a country
        and an integer $y$
        ($1 \leq y \leq 10^6$)
        representing a trip to country $s$ that Grandpa Bernie went on in
        year $y$;


one line with one integer $q$ ($1 \leq q \leq 10^5$), the number
        of queries;


$q$ lines each
        containing the name $s$ of a country and an integer
        $k$ representing a
        query for the $k$:th
        time Grandpa Bernie went to country $s$.


Each country name only consists of letters from the English
    alphabet. It is also guaranteed that, for each query asking for
    the $k$:th trip to country
    $s$, $k$ is at least $1$ and no greater than the number of
    times Grandpa Bernie went to country $s$. In particular, it is guaranteed
    that Grandpa Bernie has visited country $s$ at least once.
Output
For each query for the $k$:th trip Grandpa Bernie went to a
    country $s$, output a
    single line containing the year in which Grandpa Bernie went on
    that trip.


Sample Input 1
Sample Output 1




4
Iceland 2016
Sweden 2015
Iceland 1982
Norway 1999
3
Sweden 1
Iceland 1
Iceland 2




2015
1982
2016






Sample Input 2
Sample Output 2




4
Iceland 2014
Iceland 2015
Iceland 2015
Iceland 2016
4
Iceland 4
Iceland 3
Iceland 2
Iceland 1




2016
2015
2015
2014",2.7,Easy,1 second,1024 MB,,
Grade Curving,gradecurving,0.0,124,1442,311,4.8,Medium,https://open.kattis.com/problems/gradecurving,"An instructor may use curved score to
    grade a student’s performance. Assume a student’s original
    score is $x$ out of a
    total of $100$. One of the
    curving methods is to apply to $x$ the curving function $f(x) = 10\sqrt {x}$. The function may
    be applied $k \geq 0$
    times. For better score readability, the result is rounded to
    the next integer and the final curved score is $y = \lceil f^ k(x) \rceil $.

    For example, if the curving function is applied $k = 3$ times to $x = 80$, it changes the score
    to\begin{align*} f^3(80)
    & = f^2(f(80)) = f^2(89.4427) \\ & = f(f(89.4427)) =
    f(94.5742) = 97.2492. \end{align*}
So the curved score is $y =
    \lceil 97.2492 \rceil = 98$.
John wants to curve a student’s score $x$ using this method so that the
    curved score $y$ is
    between $y_{low}$ and
    $y_{high}$. How many times
    should he apply the curving function? In particular, what are
    the minimum and maximum choices of $k$, so that $y_{low} \leq y \leq y_{high}$?
Input
The input has a single line with three integers:
    $x$, $y_{low}$, and $y_{high}$ ($1 \leq x \leq y_{low} \leq y_{high} \leq
    100$).
Output
Output the minimum and maximum possible choices of
    $k$. If the curving
    function can be applied an infinite number of times, output
    “inf” for the maximum. If there is no
    $k$ that meets the curving
    requirement, output a single word “impossible”.


Sample Input 1
Sample Output 1




80 85 98




1 3






Sample Input 2
Sample Output 2




98 98 100




0 inf






Sample Input 3
Sample Output 3




80 85 89




impossible",4.8,Medium,1 second,1024 MB,,
Tours,tours,0.0,993,306,92,6.4,Hard,https://open.kattis.com/problems/tours,"The Arca Carania Mountain national park is opening up for
    tourist traffic. The national park has a number of sites worth
    seeing and roads that connect pairs of sites. The park
    commissioners have put together a set of round tours in the park in which visitors can
    ride buses to view various sites. Each round tour starts at
    some site (potentially different sites for different tours),
    visits a number of other sites without repeating any, and then
    returns to where it started. At least 3 different sites are
    visited in each round tour. At least one round tour is possible
    in the national park.
The park commissioners have decided that, for any given
    road, all buses will be operated by a single company. The
    commissioners do not want to be accused of favoritism, so they
    want to be sure that each possible round tour in the park has
    exactly the same number of roads assigned to each bus company.
    They realize this may be difficult to achieve. Thus, they want
    to learn what numbers of bus companies allow for a valid
    assignment of companies to roads.
Consider Sample Input 1, which is illustrated in Figure 1.
    There are a total of three round tours for these sites. Some
    company is assigned road 1-3. It must also be assigned some
    road on the round tour 1-2-3-4-1, say 2-3. But then it is
    assigned to two of the three roads on the round tour 1-2-3-1,
    and no other company can match this – so there can be no other
    companies. In Sample Input 2 there is only one round tour, so
    it is enough to assign the roads of this tour equally between
    companies.




Figure 1: Sample Input 1.
        


Input
The first line of input contains two integers $n$ ($1
    \le n \le 2\, 000$), which is the number of sites in the
    park, and $m$
    ($1 \le m \le 2\, 000$),
    which is the number of roads between the sites. Following that
    are $m$ lines, each
    containing two integers $a_
    i$ and $b_ i$
    ($1 \leq a_ i < b_ i \leq
    n$), meaning the sites $a_
    i$ and $b_ i$ are
    connected by a bidirectional road. No pair of sites is listed
    twice.
Output
Display all integers $k$ such that it is possible to assign
    the roads to $k$ companies
    in the desired way. These integers should be in ascending
    order.


Sample Input 1
Sample Output 1




4 5
1 2
2 3
3 4
1 4
1 3




1






Sample Input 2
Sample Output 2




6 6
1 2
2 3
1 3
1 4
2 5
3 6




1 3",6.4,Hard,2 seconds,1024 MB,,
Bridge Builders,bridgebuilders,0.01,1463,50,14,7.4,Hard,https://open.kattis.com/problems/bridgebuilders,"The king wants bridges built and he wants them built as
    quickly as possible. The king owns an $N \times M$ grid of land with each
    cell separated from its adjacent cells by a river running
    between them and he wants you to figure out how many man-hours
    of work it will take to build enough bridges to connect every
    island. Some cells are actually lakes and need not have a
    bridge built to them.
Some of the islands are forests where trees are abundant.
    Located in the top left corner is the base camp, which
    is always a forest.
A bridge can only be built between two islands if they are
    vertically or horizontally adjacent, and one of the islands is
    accessible from the base camp through the bridges that are
    already built. The number of man-hours it takes to build a
    bridge is the number of bridges the builders have to cross to
    get from the nearest forest to the island you’re building to,
    including the bridge being built. Builders can only walk
    between two islands if there is already a bridge between them.
    The king has already ensured that there is at least one way to
    connect all the islands. Write a program that, given a map of
    the islands, will output the minimum number of man-hours
    required to connect all islands.
Consider the following example. A green tile indicates a
    forest, gray indicates an empty island, and blue indicates
    water.





One optimal solution starts out by building the following
    bridges from the base camp forest.





This has a cost of $1 + 2 + 1
    + 2 + 3 + 4 = 13$.
Now since the forest at row $3$, column $3$ is connected to base camp, we can
    build bridges from there. One optimal solution connects the
    rest of the islands with bridges built from this forest.





This has a cost of $2 + 1 + 2
    + 1 + 2 + 3 = 11$. This brings the total cost to
    $24$ which is the optimal
    solution.
Input
The first line of the input contains an integer $T$, the number of test cases.
    $T$ test cases follow.
    Each test case will begin with $N$, the number of rows, and
    $M$, the number of
    columns, on one line separated by a space. $N$ rows follow that contain exactly
    $M$ characters each. A
    ‘T’ indicates an island with a
    forest, a ‘#’ indicates an island,
    and a ‘.’ indicates water.
You may assume that $1 \leq T
    \leq 50, 2 \leq N \leq 30$ and $2 \leq M \leq 30$. The top left cell
    is always a ‘T’ and it is possible to
    connect all islands through bridges.
Output
A single line containing “Case #$X$: $Y$”, where $X$ is the $1$-based case number, and
    $Y$ is the minimum number
    of man-hours needed to connect all islands.


Sample Input 1
Sample Output 1




2
2 2
T.
T#
4 4
T##.
##.#
.#T#
####




Case #1: 2
Case #2: 24






Sample Input 2
Sample Output 2




2
4 4
T##.
##.#
.#T#
T###
5 5
T#T.#
..#.#
#.###
###.#
T###T




Case #1: 24
Case #2: 49",7.4,Hard,2 seconds,1024 MB,,
Collecting Beepers,beepers,0.0,587,2763,1056,4.0,Medium,https://open.kattis.com/problems/beepers,"Karel is a robot who lives in a rectangular coordinate
    system where each place is designated by a set of integer
    coordinates ($x$ and
    $y$). Your job is to
    design a program that will help Karel pick up a number of
    beepers that are placed in her world. To do so you must direct
    Karel to the position where each beeper is located. Your job is
    to write a computer program that finds the length of the
    shortest path that will get Karel from her starting position,
    to each of the beepers, and return back again to the starting
    position.
Karel can only move along the $x$ and $y$ axis, never diagonally. Moving
    from one position $(i,j)$
    to an adjacent position $(i,j+1)$, $(i,j-1)$, $(i-1,j)$, or $(i+1, j)$ has a cost of one.
You can assume that Karel’s world is never larger than
    $20 \times 20$ squares and
    that there will never be more than $10$ beepers to pick up. Each
    coordinate will be given as a pair $(x,y)$ where each value will be in
    the range $1$ through the
    size of that particular direction of the coordinate system.
Input
First there will be a line containing the number of
    scenarios you are asked to help Karel in (at most $25$). For each scenario there will
    first be a line containing the size of the world. This will be
    given as two integers ($x$-size and $y$-size). Next there will be one line
    containing two numbers giving the starting position of Karel.
    On the next line there will be one number giving the number of
    beepers. For each beeper there will be a line containing two
    numbers giving the coordinates of each beeper.
Output
The output will be one line per scenario, giving the minimum
    distance that Karel has to move to get from her starting
    position to each of the beepers and back again to the starting
    position.


Sample Input 1
Sample Output 1




1
10 10
1 1
4
2 3
5 5
9 4
6 5




24",4.0,Medium,8 seconds,1024 MB,,
Birds on a Wire,birds,0.0,79,7806,2331,3.1,Medium,https://open.kattis.com/problems/birds,"Photo by Tarik
        Browne


There is a long electrical wire of length $\ell $ centimetres between two poles
    where birds like to sit. After a long day at work you like to
    watch the birds on the wire from your balcony. Some time ago
    you noticed that they don’t like to sit closer than
    $d$ centimetres from each
    other. In addition, they cannot sit closer than 6 centimetres
    to any of the poles, since there are spikes attached to the
    pole to keep it clean from faeces that would otherwise damage
    and weaken it. You start wondering how many more birds can
    possibly sit on the wire.
Task
Given numbers $\ell $
    and $d$, how many
    additional birds can sit on the wire given the positions of the
    birds already on the wire? For the purposes of this problem we
    assume that the birds have zero width.
Input
The first line contains three space separated integers: the
    length of the wire $\ell
    $, distance $d$ and
    number of birds $n$
    already sitting on the wire. The next $n$ lines contain the positions of the
    birds in any order. All number are integers, $1\leq \ell , d\leq 1\, 000\, 000\,
    000$ and $0\leq n\leq 20\,
    000$. (If you have objections to the physical
    plausibility of fitting that many birds on a line hanging
    between two poles, you may either imagine that the height of
    the line is 0 cm above ground level, or that the birds are ants
    instead.) You can assume that the birds already sitting on the
    wire are at least 6 cm from the poles and at least $d$ centimetres apart from each
    other.
Output
Output one line with one integer – the maximal number of
    additional birds that can possibly sit on the wire.


Sample Input 1
Sample Output 1




22 2 2
11
9




3






Sample Input 2
Sample Output 2




47 5 0




8",3.1,Medium,1 second,1024 MB,,
Free Food,freefood,0.0,5,9640,5996,1.5,Easy,https://open.kattis.com/problems/freefood,"Do you know what attracts almost any college student to
    participate in an event? Yes, free food. It doesn’t matter
    whether the event involves a long (sometimes boring) seminar.
    As long as free food is served for the event, then students
    will surely come.
Suppose there are $N$
    events to be held this year. The $i^\textrm {th}$ event is scheduled
    from day $s_ i$ to day
    $t_ i$, and free food is
    served for that event every day from day $s_ i$ to day $t_ i$ (inclusive). Your task in this
    problem is to find out how many days there are in which free
    food is served by at least one event.
For example, let there be $N =
    3$ events. The first event is held from day $10$ to $14$, the second event is held from
    day $13$ to $17$, and the third event is held from
    day $25$ to $26$. The days in which free food is
    served by at least one event are $10, 11, 12, 13, 14, 15, 16, 17, 25,
    26$, for a total of $10$ days. Note that both events serve
    free food on days $13$ and
    $14$.
Input
The first line contains an integer $N$ ($1
    \le N \le 100$) denoting the number of events. Each of
    the next $N$ lines
    contains two integers $s_
    i$ and $t_ i$
    ($1 \le s_ i \le t_ i \le
    365$) denoting that the $i^\textrm {th}$ event will be held
    from $s_ i$ to
    $t_ i$ (inclusive), and
    free food is served for all of those days.
Output
The output contains an integer denoting the number of days
    in which free food is served by at least one event.


Sample Input 1
Sample Output 1



3
10 14
13 17
25 26



10






Sample Input 2
Sample Output 2



2
1 365
20 28



365






Sample Input 3
Sample Output 3



4
29 29
48 48
102 102
94 94



4",1.5,Easy,1 second,1024 MB,,
Trick Shot,trickshot,0.0,1743,450,74,7.6,Hard,https://open.kattis.com/problems/trickshot,"Your game development studio, Ad Hoc Entertainment, is
    currently working on a billiards-based app they’re calling Pool
    Shark. Players face a sequence of increasingly devious pool
    puzzles in which they need to carefully position and aim a
    single billiards shot to sink multiple pool balls.
You’ve just done the first round of user testing and the
    feedback is terrible — players complain that the physics of
    your pool game is neither fun nor intuitive. After digging into
    it, you realize that the problem isn’t that your physics code
    is bad, but rather that most people just don’t have much
    intuition about how physics works. Fortunately, no one requires
    your physics to be realistic. After this liberating
    realization, your team experiments with a few models,
    eventually settling on the following rule for how to resolve
    pool-ball collisions:
When a moving pool ball B hits a stationary ball A, A begins
    moving in the direction given by the vector from the center of
    B to the center of A at the time of the collision. Ball B’s new
    velocity vector is B’s original vector reflected across A’s new
    vector (Figure H.1). Note that A’s resulting vector is what
    real physics predicts, but B’s is not (unless A is glued to the
    table or has infinite mass). For the purposes of this problem,
    the speed at which the balls move is irrelevant.






 






Figure H.1

 

Figure H.2




This actually allows for more interesting challenges, but
    requires new code to determine whether a particular level is
    feasible. You’ve been tasked with solving a very particular
    case:
Three balls labelled $1$, $2$, and $3$ are placed on a table with width
    $w$ and length
    $l$ (Figure H.2). The
    player must place the cue ball somewhere on a dashed line lying
    $h$ units above the bottom
    edge of the table. The goal is to pick a distance $d$ from the left side, and an angle
    $\theta $ such that when
    the cue ball is shot, the following events happen:


The cue ball strikes ball $1$, and then ricochets into ball
        $2$, sinking ball
        $2$ in the top left
        hole.


Ball $1$, having
        been struck by the cue ball, hits ball $3$, sinking ball $3$ in the top right hole.


For simplicity, assume that sinking a ball requires the
    center of the ball to pass directly over the center of the
    hole. Further assume that the table has no sides — a ball that
    goes out of the $w$-by-$l$ region simply falls into a digital
    abyss — and thus you don’t need to worry about balls colliding
    with the table itself.
You need to write a program that, given values for
    $w$, $l$, $h$, the position of balls
    $1$–$3$, and the radius $r$ of the balls, determines whether
    the trick shot is possible.
Input
The input begins with a line containing two positive
    integers $w$ $l$, the width and length of the pool
    table, where $w, l \leq
    120$. The left hole is at location $(0,l)$ and the right hole is at
    location $(w,l)$.
The next line will contain 8 positive integers $r$ $x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $h$, where $r \leq 5$ is the radius of all the
    balls (including the cue ball), $x_ i$ $y_ i$ is the location of ball
    $i,\, 1 \leq i \leq 3$,
    and $h$ is the distance
    the dashed line is from the front of the pool table (see the
    figure above, where $r \leq h
    \leq (1/2)l$). No two balls will ever overlap, though
    they may touch at a point, and all balls will lie between the
    dashed line and the back of the table. All balls will lie
    completely on the table, and the cue ball must also lie
    completely on the table (otherwise the shot is impossible).
Output
For each test case, display the distance $d$ to place the ball on the dashed
    line and the angle $\theta
    $ to shoot the ball, or the word “impossible” if the trick shot cannot be done.
    Output $\theta $ in
    degrees, and round both $d$ and $\theta $ to the nearest hundredth.
    Always show two digits after the decimal point, even if the
    digits are zero.


Sample Input 1
Sample Output 1




20 30
2 10 20 2 24 18 28 10




12.74 127.83






Sample Input 2
Sample Output 2




20 30
2 15 20 2 24 18 28 10




impossible",7.6,Hard,1 second,2048 MB,,
A Random Problem,randomproblem,0.0,1208,449,134,7.7,Hard,https://open.kattis.com/problems/randomproblem,"Generating a random number sequence is not easy. Many
    sequences may look random but upon closer inspection we can
    find hidden regularities in the occurrence of the numbers. For
    example, consider the following $100$-digit “random” sequence starting
    with $4, 7, 9, \ldots
    $:

                  4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4
                  4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2
                  0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7
                  2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8
                  8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9

If you look closely, whenever a $4$ is followed immediately by another
    $4$, the third value after
    this will be a $3$ (we’re
    sure you saw that). We’ll call features like this triple
    correlations and we’ll represent it as $4(1)4(3)3$, where the numbers in
    parentheses indicate how far away each number on either side of
    the parentheses must be. More precisely, a sequence of
    $p$ digits has an
    $a(n)b(m)c$ triple
    correlation if


any time there is an $a$ followed $n$ locations later by a
        $b$ there is always a
        $c$ located
        $m$ locations after
        the $b$ unless
        $b$’s location is
        within distance $m-1$
        of the end of the sequence.


any time there is a $b$ followed $m$ locations later by a
        $c$ there is always an
        $a$ located
        $n$ locations before
        the $b$ unless
        $b$’s location is
        within distance $n-1$
        of the beginning of the sequence.


any time there is an $a$ followed $n+m$ locations later by a
        $c$ there is always a
        $b$ located
        $n$ locations after
        the $a$.


the correlation occurs at least $\lceil p/40 \rceil + 1$ times,
        where $\lceil x \rceil
        $ denotes the smallest integer greater than or equal
        to $x$.


Such correlations are tough to spot in general, so that’s
    where we need your help. You will be given a sequence of digits
    and must search it for triple correlations.
Input
Input starts with a positive integer $p$ ($p
    \leq 1\, 000$) indicating the number of random digits in
    the sequence. Starting on the next line will be the
    $p$ digits, separated by
    spaces and potentially spread across multiple lines. No line
    will contain more than $100$ digits and there will be no
    blank lines.
Output
Display triple correlation a(n)b(m)c
    found if it occurs in the list (with the appropriate
    values for a, b,
    c, n, and m filled in) or the phrase random
    sequence otherwise. If there are multiple triple
    correlations in the sequence, display the one which begins
    earliest in the sequence. If there is still a tie, choose the
    one with the smaller value of n, and if
    there is still a tie, choose the one with the smaller value of
    m.


Sample Input 1
Sample Output 1



100
4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4
4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2
0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7
2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8
8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9



triple correlation 4(1)4(3)3 found






Sample Input 2
Sample Output 2



10
1 2 3 1 2 2 1 1 3 0



random sequence",7.7,Hard,9 seconds,1024 MB,,
Rimski,rimski,0.0,5,1040,326,3.7,Medium,https://open.kattis.com/problems/rimski,"Using roman numerals the numbers $1, 2, 3, 4, 5, 6, 7, 8, 9$ are
    written as ‘I’, ‘II’, ‘III’, ‘IV’, ‘V’, ‘VI’, ‘VII’, ‘VIII’,
    ‘IX’. The numbers $10, 20, 30,
    40, 50, 60, 70, 80, 90$ are written as ‘X’, ‘XX’, ‘XXX’,
    ‘XL’, ‘L’, ‘LX’, ‘LXX’, ‘LXXX’, ‘XC’. Any number smaller than
    $100$ can be written by
    converting tens and ones separately and concatenating the
    results. So, for example, the number $48$ would be written as XLVIII, XL
    for $40$ and VIII for
    $8$. Given a number
    written in roman numerals, rearrange its characters so that you
    create the smallest possible number, written in roman
    numerals.
Input
The first and only line of input contains one integer
    $B$ ($1 \leq B < 100 $), written using
    roman numerals.
Output
The first and only line of output should contain a
    rearrangement of input characters so that it represents the
    smallest possible number, written in roman numerals.


Sample Input 1
Sample Output 1




VII




VII






Sample Input 2
Sample Output 2




VI




IV






Sample Input 3
Sample Output 3




III




III",3.7,Medium,1 second,1024 MB,,
Tricky Factoring,trickyfactoring,0.0,113,414,107,6.3,Hard,https://open.kattis.com/problems/trickyfactoring,"Ms. Alice was working on making some factoring homework for
    her students last week, where the students get questions in the
    form of $ax^2+bx+c$, and
    must rewrite the expression in the form $(dx+ e)(fx + g)$, where $a,b,c,d,e,f,g$ are integers. However,
    last night the ZomBs invaded her house! The next day, when Ms.
    Alice woke up, she found that the ZomBs had eaten all the
    $b$s! They had eaten the
    middle number on all her factoring questions that she spent all
    week making for her students. Ms. Alice decided that instead of
    remaking all her questions, she would just ask her students how
    many possible values there are for $b$ that would make the expression
    $ax^2+bx+c$
    factorable.
The expression $ax^2+bx+c$ is factorable if and only
    if the expression $ax^2+bx+c$ is able to be successfully
    rewritten in the form $(dx+ e)(fx
    + g)$, where $a,b,c,d,e,f,g$ are integers.
As one of Ms. Alice’s students, you must come up with a
    solution to her tricky new problem!
Input
The input consists of two space separated integers
    $0<a,c\leq 10^{16}$. It
    is guaranteed that all prime factors of $a$ and $c$ are less than $10^6$.
Output
The number of possible integer values $b$ that would make $ax^2+bx+c$ factorable.


Sample Input 1
Sample Output 1



1 1



2






Sample Input 2
Sample Output 2



12 33



18






Sample Input 3
Sample Output 3



5040 24



128






Sample Input 4
Sample Output 4



7560 10080



486",6.3,Hard,1 second,1024 MB,,
Adventures in Moving -- Part IV,adventuremoving4,0.0,209,2093,454,5.3,Medium,https://open.kattis.com/problems/adventuremoving4,"To help you move from Waterloo to the big city, you are
    considering renting a moving truck. Gas prices being so high
    these days, you want to know how much the gas for such a beast
    will set you back.
The truck consumes a full litre of gas for each kilometre it
    travels. It has a 200 litre gas tank. When you rent the truck
    in Waterloo, the tank is half full. When you return it in the
    big city, the tank must be at least half full, or you’ll get
    gouged even more for gas by the rental company. You would like
    to spend as little as possible on gas, but you don’t want to
    run out along the way.
Input
Input is all integers. The first integer is the distance in
    kilometres from Waterloo to the big city, at most $10\, 000$. Next comes a set of up to
    100 gas station specifications, describing all the gas stations
    along your route, in non-decreasing order by distance. Each
    specification consists of the distance in kilometres of the gas
    station from Waterloo, and the price of a litre of gas at the
    gas station, in tenths of a cent, at most $2\, 000$.
Output
Output is the minimum amount of money that you can spend on
    gas to get you from Waterloo to the big city. If it is not
    possible to get from Waterloo to the big city without running
    out of gas along the way, output “Impossible”.


Sample Input 1
Sample Output 1




500
100 999
150 888
200 777
300 999
400 1009
450 1019
500 1399




450550",5.3,Medium,1 second,1024 MB,,
Domine,domine,0.01,920,187,61,7.0,Hard,https://open.kattis.com/problems/domine,"Mirko has a chessboard with $N$ rows and just three columns.
    Slavica has written an integer on each field. Mirko has
    $K$ dominoes at his
    disposal, their dimensions being $2 \times 1$, and has to arrange
    all of them on the board without overlapping, in a way
    that each domino covers exactly two fields of the board. He can
    rotate the dominoes as he please
Help Mirko cover the largest sum of numbers
    possible with the dominoes!
Input
The first line of input contains the integer $N$ ($1
    \le N \le 1000$), the number of rows, and $K$ ($1
    \le K \le 1000$), the number of dominoes available.
Each of the following $N$ lines contains three integers
    written in the $i$’th row
    of the board. All numbers will be less than $10^6$ in absolute value.
Output
The first and only line of output must contain the maximal
    sum possible to cover with exactly $K$ dominoes.


Sample Input 1
Sample Output 1




5 3
2 1 -1
1 3 2
0 2 3
2 1 1
3 3 0




16






Sample Input 2
Sample Output 2




2 2
0 4 1
3 5 1




13",7.0,Hard,2 seconds,1024 MB,,
Frumtölutalning,frumtolutalning,0.5,1139,554,416,8.8,Hard,https://open.kattis.com/problems/frumtolutalning,"Prime
        Numbers by geralt, Pixabay
      
An integer $p$ is a
    prime number if it is larger than $1$ and its only positive divisors are
    $1$ and $p$. For example, $10$ is not a prime because its
    positive divisors are $1$,
    $2$, $5$, and $10$. However, $11$ is a prime because its only
    positive divisors are $1$
    and $11$. In the same vein
    you can see that $2$,
    $3$, and $17$ are primes, but $4$, $9$, and $15$ are not prime.
    Counting all the primes between $1$ and $100$ shows that there are
    $25$ prime numbers smaller
    than $100$. With a little
    more work one can show that there are $168$ prime numbers smaller than
    $1\, 000$.
Given two integers, $a$
    and $b$, count the number
    of primes smaller than or equal to $b$ and larger than or equal to
    $a$.
Input
The input consists of two integers, $a$ and $b$ ($1
    \leq a \leq b$).
Output
The output should contain the number of primes in the range
    $a$ to $b$.
Scoring



Group


Points


Constraints




1


19


$b \leq 10^3$




2


23


$b \leq 10^9$,
          $b-a \leq 10^3$




3


14


$b \leq 10^{18}$,
          $b-a \leq 10^5$




4


13


$b \leq 10^7$




5


16


$b \leq 10^{15}$,
          $b-a \leq 10^7$




6


15


$b \leq
          10^{11}$





Sample Input 1
Sample Output 1



1 100



25






Sample Input 2
Sample Output 2



3 5



2






Sample Input 3
Sample Output 3



42 1337



204",8.8,Hard,9 seconds,1024 MB,,
Association of Cats and Magical Lights,magicallights,0.18,916,3070,790,5.7,Hard,https://open.kattis.com/problems/magicallights,"Rar the Cat$^($™$^)$ is the founder of ACM (Association of Cats and Magical Lights).
    This is the story of the founding of ACM.
It is the second half of the year again and Rar the
    Cat$^($™$^)$ is looking forward to Christmas.
    When people think of Christmas, Christmas trees will surely
    come into the picture. This year, Rar the Cat$^($™$^)$ decides to decorate a Christmas
    tree with $N$ LED lights
    with up to 100 different colours. Each LED light can only have
    a single colour as Rar the Cat$^($™$^)$ is too poor to afford more
    sophisticated models of LED lights.
Being a programmer himself, Rar the Cat$^($™$^)$ LED lights are arranged in a tree
    formation on the Christmas tree. That being said, each LED
    light can be represented as a node and the wires between
    $2$ LED lights can be
    represented as an edge. The whole formation consists of
    $N$ nodes fully connected
    by $N-1$ edges. The nodes
    are labelled from $1$ to
    $N$ and each node can hold
    colour denoted as $1$ to
    $100$. It is noted that
    each LED is connected to every other LED directly or indirectly
    by wires and the tree formed is rooted at node $1$.
Hubert the Cow finds that Rar the Cat$^($™$^)$ Christmas tree is too boring
    because it lacks some magical colours. A magical colour in a
    subtree is defined as a colour whereby there is an odd number
    of LEDs with that particular colour within the subtree
    only.



In the tree to the right, the subtree of node
    $1$ has $3$ white nodes and $4$ black nodes. As such, white is a
    magical colour for the subtree of node $1$. However, the subtree of node
    $3$ has $1$ white node and $1$ black node, thus the number of
    magical colour of the subtree of node $3$ is $2$. In addition, all leaf nodes of
    the tree have $1$ magical
    colour by definition.

    In order to improve on his Christmas tree decorations, Rar
    the Cat$^($™$^)$ intends to modify the colours of
    the LED lights on the tree. However, he does not know how to
    count how many magical colours there are.
Your task, is now to answer how many magical colours there
    are in a subtree requested by Rar the Cat$^($™$^)$. This will be done in between Rar
    the Cat$^($™$^)$ modifications. There will be
    $Q$ queries and
    modifications in total.
Soon after this, Rar the Cat$^($™$^)$ Christmas tree with these magical
    lights become so popular and Rar the Cat$^($™$^)$ founded ACM to further spread the adoption of such
    trees worldwide.
Input
The first line will consists of $2$ integers, $N$ and $Q$. $N$ will be positive and not more than
    $300\, 000$ while
    $Q$ will be positive and
    not more than $1\, 000\,
    000$.
$N$ integers will
    follow on the next line. The $i^{th}$ integer will be $C_ i$. $C_ i$ denotes the colour of node
    $i$ and can only range
    from $1$ to $100$ inclusive.
The next line will have $N-1$ integers. The $i^{th}$ integer will be $P_{i+1}$, $P_{i+1}$ denotes the parent node of
    node $i+1$.
$Q$ lines will then
    follow with $2$ integers
    each, $K$ followed by
    $X$. If $K$ is $0$, then this line represents a query
    for how many magical colours are there in the subtree of node
    $X$. If $K$ is an integer between $1$ and $100$, then it means that the colour
    of node $X$ is changed to
    colour $K$.
Output
For each query when $K =
    0$, output in one line: the number of magical colours in
    the subtree of $X$
    (inclusive).


Sample Input 1
Sample Output 1




10 5
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9
0 1
0 4
1 4
0 1
0 4




10
7
8
7







Sample Input 2
Sample Output 2




7 7
1 2 2 1 1 2 1
1 1 1 2 2 3
0 1
0 2
0 3
0 4
0 5
0 6
0 7




1
1
2
1
1
1
1",5.7,Hard,3 seconds,1024 MB,,
Checks Post Facto,checks,0.0,4749,136,38,6.5,Hard,https://open.kattis.com/problems/checks,"Your university’s board game club just hosted a Checkers
    tournament, and you were assigned to take notes on the games.
    Unfortunately, while walking home, you dropped all of your
    papers into a puddle! Disaster! Much of what you wrote is now
    unreadable; all you have left are some lists of moves played in
    the middle of various games. Is there some way you can
    reconstruct what happened in those games? You had better fix
    things fast, or they will demote you to Tic-Tac-Toe
    recordkeeper!
Checkers (or English Draughts) is a well-known board game
    with simple rules. It is played on the dark squares of an
    $8\times 8$ checkerboard.
    There are two players, Black and White, who alternate turns
    moving their pieces (all of Black’s pieces are black and all of
    White’s pieces are white). Each piece occupies a single dark
    square, and can be either a normal man or a promoted
    king. A turn consists of choosing one piece and moving
    it in one of two ways:


Shifting it diagonally to an unoccupied adjacent dark
        square, as shown in Figure a. This is called a
        simple move. If the piece is a man, it can move
        only in the two diagonal directions towards the opposing
        side of the board (towards the bottom for Black, the top
        for White). If the piece is a king, it can move in all four
        diagonal directions.


Jumping over an adjacent enemy piece to an unoccupied
        square immediately on the other side, then removing
        (capturing) that piece. Men can jump only in the
        two directions described above, while kings can jump in all
        four. The player can then repeat this step, continuing to
        jump with the same piece as long as there are
        properly-positioned enemy pieces to capture. Such a
        sequence of one or more jumps is called a jump
        move. Figure b shows a jump move comprising three
        jumps.









(a) Simple
            move

  
        




(b) Jump
            move

  
        




(c) Board
            numbering



Figure 1: (a), (b) The first two moves in Sample
          Input 1. The larger pieces are kings and the smaller ones
          are men. Black sits at the top and White at the bottom.
          (c) Numbering used in the input.
        


In Checkers, captures are forced moves. If a jump move is
    available at the start of a player’s turn, they must jump, and
    cannot stop jumping with that piece until it has no more
    possible jumps. They are free to choose which piece to jump
    with, and where, if there are multiple possibilities. In
    Figure b, Black could not have made any other move.
If a man reaches the farthest row from its player (that is,
    a black man reaches the bottom row or a white man reaches the
    top row), it is removed from the board and replaced by a king
    of the same color (it is said to be promoted), and the
    turn ends. A piece cannot be promoted and then jump backwards
    as a new king in the same turn.
Given a list of moves, find a setup of pieces such that the
    moves can be legally played in sequence starting from that
    setup. This setup may not have black men on the bottom row or
    white men on the top row, since they would have been promoted
    to kings already. You need only ensure that the rules above are
    obeyed; you do not need to ensure that this setup is reachable
    in a real game of Checkers.
Input
The first line of input contains a character $c$ and an integer $n$, where $c \in \{ \texttt{B}, \texttt{W}\} $
    indicates which player makes the first move (Black or White
    respectively) and $n$
    ($1 \le n \le 100$) is the
    number of moves in the list. Then follow $n$ lines, each of which describes a
    move in the standard Checkers notation defined below.
The dark squares are identified by numbers $1$–$32$, as shown in Figure c. A
    simple move from square $a$ to square $b$ is written as $a$-$b$.
    A jump move starting at $a$ and jumping to $b_1, b_2, \dots , b_ k$ is written as
    $a$x$b_1$x$b_2$x$\cdots $x$b_ k$.
There is always a valid solution for the given set of
    moves.
Output
Output two boards side-by-side (separated by a space),
    giving the positions of all pieces on the board before (on the
    left) and after (on the right) the given moves. Use ‘-’ for light squares, ‘.’ for empty dark squares, lowercase
    ‘b’ and ‘w’
    for black and white men, and uppercase ‘B’ and ‘W’ for black
    and white kings. If there is more than one valid solution, any
    one is acceptable.


Sample Input 1
Sample Output 1



W 3
21-17
13x22x31x24
19x28



-b-.-.-. -b-.-.-.
.-.-.-.- .-.-.-.-
-.-.-.-. -.-.-.-.
B-.-w-.- .-.-w-.-
-.-.-W-. -.-.-.-.
w-.-.-.- .-.-.-.-
-.-w-w-. -.-.-.-W
.-.-.-.- .-.-.-.-






Sample Input 2
Sample Output 2



B 5
2-7
9x2
32-27
2x11x18
5-9



-.-b-.-W -.-.-.-W
b-b-.-.- .-.-.-.-
-w-.-.-. -b-.-.-.
B-w-b-.- B-w-.-.-
-.-.-.-. -.-W-.-.
.-.-.-.- .-.-.-.-
-.-.-.-. -.-.-B-.
.-.-.-B- .-.-.-.-",6.5,Hard,1 second,1024 MB,,
Hiding Chickens,hidingchickens,0.0,590,1369,335,6.1,Hard,https://open.kattis.com/problems/hidingchickens,"CC0, Retreived from Max Pixel


“Weeeee,” says the fox after breaking in to the roost and
    killing all the chickens. Then he realizes that he has killed
    way more chickens then he can eat right now and hence he
    decides to hide them in already existing hiding spots nearby.
    The fox can only carry two hens at a time and every hiding spot
    can fit at most one. As he is already tired after all the
    killing, he wants you to compute the minimum distance he has to
    walk to hide all of the dead chickens.
Input
The first line of input gives the position of the roost as
    two real numbers $x$ and
    $y$ on a single line. The
    next line contains an integer $1
    \leq N \leq 20$, giving the number of hiding spots and
    dead chickens. Then follow $N$ lines, each line consisting of two
    real numbers giving the coordinates of a hiding spot. All
    coordinate values are between $0$ and $1\, 000$ and given with $6$-digit precision.
Output
A single line with a floating point number, the minimum
    distance the fox has to walk to hide all the chickens. Any
    answer with an error of at most $10^{-6}$ will be judged as
    correct.


Sample Input 1
Sample Output 1




10.000000 20.123456
1
13.141593 20.123456




3.141593






Sample Input 2
Sample Output 2




5.000000 5.000000
4
2.000000 9.000000
14.000000 17.000000
6.500000 3.000000
14.000000 18.500000




31.500000",6.1,Hard,3 seconds,1024 MB,,
Ball,ball,0.0,5,794,371,3.9,Medium,https://open.kattis.com/problems/ball,"Image from 
        commons.wikimedia.org


There is a school dance scheduled tomorrow and $n$ students will attend. The students
    are numbered from $1$ to
    $n$. The students are
    registered in pairs and the list of attendees is $\frac{n}{2} + 1$ lines long. Each
    number also appears once in the list. But that doesn’t add up!
    Some devious prankster must have added a pair to the list
    somewhere. Given the list determine which pair should be
    removed.
Input
The first line of the input contains a single even integer
    $n$ ($2 \leq n \leq 2 \cdot 10^5$), the
    number of students. Then follow $\frac{n}{2} + 1$ lines. Each line
    contains two integers $a_ i, b_
    i$ ($1 \leq a_ i, b_ i
    \leq n$), indicating the $i$-th pair on the list.
Output
Print the pair that the prankster added, on a single line.
    The numbers, $a$ and
    $b$, should be separated
    by a single space and ordered such that $a < b$.
Scoring



Group


Points


Constraints




1


40


$2 \leq n \leq
          200$




2


30


$2 \leq n \leq
          5000$




3


30


No further constraints





Sample Input 1
Sample Output 1



10
1 2
3 5
4 8
6 7
4 7
9 10



4 7






Sample Input 2
Sample Output 2



2
2 1
1 2



1 2",3.9,Medium,2 seconds,1024 MB,,
Money Matters,moneymatters,0.0,245,8557,3143,3.1,Medium,https://open.kattis.com/problems/moneymatters,"Our sad tale begins with a tight clique of friends. Together
    they went on a trip to the picturesque country of Molvania.
    During their stay, various events which are too horrible to
    mention occurred. The net result was that the last evening of
    the trip ended with a momentous exchange of “I never want to
    see you again!”s. A quick calculation tells you it may have
    been said almost $50$
    million times!
Back home in Scandinavia, our group of ex-friends realize
    that they haven’t split the costs incurred during the trip
    evenly. Some people may be out several thousand crowns.
    Settling the debts turns out to be a bit more problematic than
    it ought to be, as many in the group no longer wish to speak to
    one another, and even less to give each other money.
Naturally, you want to help out, so you ask each person to
    tell you how much money she owes or is owed, and whom she is
    still friends with. Given this information, you’re sure you can
    figure out if it’s possible for everyone to get even, and with
    money only being given between persons who are still
    friends.
Input
The first line contains two integers, $n$ ($2
    \leq n \leq 10\, 000$), and $m$ ($0
    \le m \leq 50\, 000$), the number of friends and the
    number of remaining friendships. The friends are named
    $0, 1, \ldots , n-1$. Then
    $n$ lines follow, each
    containing an integer $o$
    ($-10\, 000 \le o \le 10\,
    000)$ indicating how much each person owes (or is owed
    if $o <0$). The first
    of those lines gives the balance of person $0$, the second line the balance of
    person $1$, and so on. The
    sum of these values is zero.
After this comes $m$
    lines giving the remaining friendships, each line containing
    two integers $x$,
    $y$ ($0 \le x < y \le n-1$) indicating
    that persons $x$ and
    $y$ are still friends.
Output
Your output should consist of a single line saying
    “POSSIBLE” or “IMPOSSIBLE”.


Sample Input 1
Sample Output 1




5 3
100
-75
-25
-42
42
0 1
1 2
3 4




POSSIBLE






Sample Input 2
Sample Output 2




4 2
15
20
-10
-25
0 2
1 3




IMPOSSIBLE",3.1,Medium,1 second,1024 MB,,
Úllen Dúllen Doff 2,ullendullendoff2,0.0,5,504,430,2.5,Easy,https://open.kattis.com/problems/ullendullendoff2,"Photo from flickr.com


Lárus is a middle manager at a stellar company, He manages
    $n$ members of the staff,
    all of which are related to him except for one.
When a new assignment pops up, Lárus is in charge of
    assigning it to a member of the staff. Lárus wants to minimise
    the work his relatives must do. However, he cannot simply pick
    the same person every time.
To ensure people do not believe Lárus is practising
    nepotism, He lines the people up in a circle and uses a mantra
    to pick a person at random for the assignment. First he picks a
    staff member at which to point and recites the first word. He
    then recites the rest of the mantra and points to the next
    staff member to the right for each word that he recites.
The mantra is as follows:

      Úllen dúllen doff kikke lane koff koffe lane bikke bane úllen
      dúllen doff.
    
How can Lárus line up the staff members so that his
    relatives do not get the assignment?
Input
The first line of input contains one integer $n$, the number of staff members. Then
    $n$ lines follow, where
    each line contains one name. The first name is the staff member
    which is not related to Lárus.
You may assume that each name is unique and consists of
    $1$ to $10$ lowercase English letters.
Output
Output $n$ lines, where
    each line contains one name of a staff member and such that no
    name is repeated. Lárus will use the ordering you output to
    recite the mantra and pick the staff member receiving the
    assignment. If the ordering you output results in one of his
    relatives being picked, then your solution will be considered
    wrong.
Scoring
The number of staff members, $n$, can range from $1$ to $20$. There exists a test group for
    each possible value of $n$
    and each group is worth $5$ points. You must solve all the
    test cases in a test group to earn the points for that
    group.
Explanation of samples
In the first sample, one possible solution is to iterate
    through the same order as the input, resulting in the following
    steps:


Úllen: Arnar


dúllen: Atli


doff: Bjarni


kikke: Bjarki


lane: Hannes


koff: Unnar


koffe: Arnar


lane: Atli


bikke: Bjarni


bane: Bjarki


úllen: Hannes


dúllen: Unnar


doff: Arnar


Since Arnar ends up being the final choice, the output is
    considered correct.
In the second sample, one possible answer is to iterate
    through the following order:


Úllen: v


dúllen: x


doff: y


kikke: a


lane: b


koff: c


koffe: p


lane: q


bikke: r


bane: s


úllen: t


dúllen: u


doff: z


In the end, z is chosen and the output is considered
    correct.
Note that many other correct outputs exist and that in the
    second sample we do not reach the final two values in the order
    given.


Sample Input 1
Sample Output 1



6
arnar
atli
bjarni
bjarki
hannes
unnar



arnar
atli
bjarni
bjarki
hannes
unnar






Sample Input 2
Sample Output 2



15
z
x
y
a
b
c
p
q
r
s
t
u
v
w
o



v
x
y
a
b
c
p
q
r
s
t
u
z
w
o",2.5,Easy,1 second,1024 MB,,
Kleptography,kleptography,0.0,79,2202,1596,1.7,Easy,https://open.kattis.com/problems/kleptography,"John likes simple ciphers. He had been using the “Caesar”
    cipher to encrypt his diary until recently, when he learned a
    hard lesson about its strength by catching his sister Mary
    browsing through the diary without any problems.
Rapidly searching for an alternative, John found a solution:
    the famous “Autokey” cipher. He uses a version that takes the
    $26$ lower-case letters
    ‘a’–‘z’ and
    internally translates them in alphabetical order to the numbers
    $0$ to $25$.
The encryption key $k$
    begins with a secret prefix of $n$ letters. Each of the remaining
    letters of the key is copied from the letters of the plaintext
    $a$, so that $k_{n+i} = a_{i}$ for $i \geq 1$. Encryption of the
    plaintext $a$ to the
    ciphertext $b$ follows the
    formula $b_ i = a_ i + k_ i \bmod
    26$.
Mary is not easily discouraged. She was able to get a peek
    at the last $n$ letters
    John typed into his diary on the family computer before he
    noticed her, quickly encrypted the text document with a click,
    and left. This could be her chance.
Input
The input consists of:


One line with two integers $n$ and $m$ ($1 \le n \le 30$, $n + 1 \le m \le 100$), where
        $n$ is the length of
        the keyword as well as the number of letters Mary saw, and
        $m$ is the length of
        the text.


One line with $n$
        lower-case letters, the last $n$ letters of the plaintext.


One line with $m$
        lower-case letters, the whole ciphertext.


Output
Output the plaintext of John’s diary.


Sample Input 1
Sample Output 1



5 16
again
pirpumsemoystoal



marywasnosyagain






Sample Input 2
Sample Output 2



1 12
d
fzvfkdocukfu



shortkeyword",1.7,Easy,1 second,1024 MB,,
Sudokunique,sudokunique,0.01,1810,1781,290,8.6,Hard,https://open.kattis.com/problems/sudokunique,"The popular game of Sudoku requires the player to fill in a
    $9$-by-$9$ board using the digits
    $1$ through $9$, such that no row, column, or
    $3$-by-$3$ square (see diagram) has more than
    one copy of each digit. The player is given a partially
    completed board and must fill in the blank squares. Designing a
    Sudoku puzzle appears easy – just start with a solved, valid
    puzzle, and erase the digits in some of the squares. However,
    if the designer erases too many squares, then there might be
    multiple solutions. This can make solving the puzzle more
    difficult, and potentially less fun. Thus, you should write a
    program to help a designer find out if their puzzle has exactly
    one solution.




 3  


  5  


  7  


  4  


  9  


  1  


  6  


  2  


  8  




 9  


  2  


  4  


  8  


  6  


  7  


  3  


  5  


  1  




 6  


  1  


  8  


  5  


  2  


  3  


  4  


  7  


  9  




 1  


  6  


  9  


  2  


  7  


  5  


  8  


  3  


  4  




 7  


  4  


  5  


  9  


  3  


  8  


  1  


  6  


  2  




 8  


  3  


  2  


  6  


  1  


  4  


  7  


  9  


  5  




 2  


  9  


  1  


  3  


  8  


  6  


  5  


  4  


  7  




 5  


  7  


  6  


  1  


  4  


  2  


  9  


  8  


  3  




 4  


  8  


  3  


  7  


  5  


  9  


  2  


  1  


  6  




Input
Input consists of up to $100$ Sudoku boards. Each board is
    given as a $9$-by-$9$ matrix using digits $0$ through $9$, one matrix row per line. If a
    board square contains $0$,
    that means it’s been erased. There is a blank line between
    pairs of boards. Input ends at end of file.
Output
For each board, if there is a unique solution, print the
    solution using the same format as the input. If there are
    multiple solutions, print “Non-unique”. If the designer has
    made a terrible mistake and there is no solution, print “Find
    another job”. Separate the outputs for adjacent cases with a
    blank line.


Sample Input 1
Sample Output 1



3 0 7 4 0 0 0 0 8
0 0 4 0 0 7 3 5 0
0 1 0 0 2 0 0 0 9
0 6 9 2 7 0 8 3 0
0 0 0 0 0 0 0 0 0
0 3 2 0 1 4 7 9 0
2 0 0 0 8 0 0 4 0
0 7 6 1 0 0 9 0 0
4 0 0 0 0 9 2 0 6

0 4 8 3 9 0 7 1 6
7 7 1 6 0 8 3 4 9
9 3 6 7 4 1 0 8 0
6 8 0 0 3 9 1 7 4
3 0 9 1 7 4 6 0 8
7 1 4 8 6 0 9 0 3
8 6 3 4 1 7 0 9 0
1 9 0 0 8 6 4 3 7
4 0 7 9 0 3 8 6 1

0 4 8 3 9 0 7 1 6
0 7 1 6 0 8 3 4 9
9 3 6 7 4 1 0 8 0
6 8 0 0 3 9 1 7 4
3 0 9 1 7 4 6 0 8
7 1 4 8 6 0 9 0 3
8 6 3 4 1 7 0 9 0
1 9 0 0 8 6 4 3 7
4 0 7 9 0 3 8 6 1



3 5 7 4 9 1 6 2 8
9 2 4 8 6 7 3 5 1
6 1 8 5 2 3 4 7 9
1 6 9 2 7 5 8 3 4
7 4 5 9 3 8 1 6 2
8 3 2 6 1 4 7 9 5
2 9 1 3 8 6 5 4 7
5 7 6 1 4 2 9 8 3
4 8 3 7 5 9 2 1 6

Find another job

Non-unique",8.6,Hard,6 seconds,1024 MB,,
"Bið, endalaus bið",bidendalausbid,0.0,5,938,595,2.5,Easy,https://open.kattis.com/problems/bidendalausbid,"Svala has been waiting for forever and the wait barely
    shortens, it seems. She looked at the clock quite a while ago
    so she’s going to check what the time is. Svala doesn’t know
    how to read the time off a clock though, can you help her and
    tell her how many minutes have passed since she first looked at
    the time?
Input
The input consists of two lines, both in the format
    $HH:MM$. The first line
    shows what the time was when Svala first looked at the clock.
    The second line shows what the time is now.
Output
Print one line with a single integer, the number of minutes
    Svala has waited. She will never wait for $24$ hours or more.
Scoring



Group


Points


Constraints




1


50


Svala will not wait past midnight.




2


50


No further constraints.





Sample Input 1
Sample Output 1



02:02
20:20



1098






Sample Input 2
Sample Output 2



13:37
13:42



5






Sample Input 3
Sample Output 3



20:20
02:02



342",2.5,Easy,1 second,1024 MB,,
Memory Match,memorymatch,0.0,417,2802,843,4.1,Medium,https://open.kattis.com/problems/memorymatch,"You are playing the game “Memory Match”.
This game revolves around a set of $N$ picture cards. The cards are
    organized in pairs: there are $N/2$ different pictures, each picture
    occurring on exactly two cards.
At the beginning of the game, the cards are shuffled and
    laid face down on the table. Players then take turns in
    guessing a pair of cards with the same picture. Each turn
    consists of picking a face-down card and turning it over to
    reveal its picture, then picking another face-down card and
    turning that card over as well. If the pictures on the two
    turned cards are identical, the cards remain face-up, the
    player scores a point and may take another turn. If the
    pictures are different, both cards are turned face-down again
    and the turn goes to the next player.
It is now your turn! Given a description of all previous
    actions in the game, pick as many matching pairs as
    possible.




Figure 1: Illustration of the first example input.
          Only cards $3$ and
          $6$ have been
          matched correctly, all other cards are face-down. How
          many pairs can you score?
        


Input
The first line contains an even integer $N$, the number of cards on the table
    ($2 \leq N \leq
    1000$).
The second line contains an integer $K$, the number of turns played thus
    far in the game ($0 \leq K \leq
    1000$).
The following $K$ lines
    each describe a turn. A turn is described by integers
    $C_1$ and $C_2$ followed by words $P_1$ and $P_2$. The numbers $C_1$ and $C_2$ refer to card positions on the
    table ($1 \leq C_1, C_2 \leq
    N$ and $C_1 \neq
    C_2$). The words describe the pictures on the two
    selected cards. Each word consists of between $1$ and $20$ lowercase letters in range
    ‘a’ …‘z’.
    If $P_1 = P_2$, the two
    cards stay face-up and the corresponding positions $C_1$ and $C_2$ may not be chosen again.
The input is such that at least two cards are still in
    face-down position.
Output
Output one line with an integer $S$, the number of matching pairs you
    can score with certainty.


Sample Input 1
Sample Output 1




8
5
1 3 earth sun
2 6 mars sun
6 3 sun sun
7 5 earth moon
2 7 mars earth




3






Sample Input 2
Sample Output 2




10
6
1 2 moon earth
9 10 venus sun
8 7 moon venus
1 8 moon moon
4 10 sun sun
9 6 venus mars




3






Sample Input 3
Sample Output 3




8
2
1 3 moon earth
2 6 sun earth




1",4.1,Medium,1 second,1024 MB,,
Convex Hull,convexhull2,0.02,412,1449,315,7.1,Hard,https://open.kattis.com/problems/convexhull2,"Finding the convex hull of a set of points is an important
    problem that is often part of a larger problem. There are many
    algorithms for finding the convex hull. Since problems
    involving the convex hull sometimes appear in the ACM World
    Finals, it is a good idea for contestants to know some of these
    algorithms.
Finding the convex hull of a set of points in the plane can
    be divided into two sub-tasks. First, given a set of points,
    find a subset of those points that, when joined with line
    segments, form a convex polygon that encloses all of the
    original points. Second, output the points of the convex hull
    in order, walking counter-clockwise around the polygon. In this
    problem, the first sub-task has already been done for you, and
    your program should complete the second sub-task. That is,
    given the points that are known to lie on the convex hull,
    output them in order walking counter-clockwise around the
    hull.
Input
The first line of input contains a single integer
    $3 \le n \le 100\, 000$,
    the number of points. The following $n$ lines of input each describe a
    point. Each of these lines contains two integers and either a
    Y or an N,
    separated by spaces. The two integers specify the $x$- and $y$-coordinates of the point. A
    Y indicates that the point is on the
    convex hull of all the points, and a N indicates that it is not. The $x$- and $y$-coordinates of each point will be
    no less than $-1\, 000\, 000\,
    000$ and no greater than $1\, 000\, 000\, 000$. No point will
    appear more than once in the input. The points in the input
    will never all lie on a line.
Output
First, output a line containing a single integer
    $m$, the number of points
    on the convex hull. Next output $m$ lines, each describing a point on
    the convex hull, in counter-clockwise order around the hull.
    Each of these lines should contain the $x$-coordinate of the point, followed
    by a space, followed by the $y$-coordinate of the point. Start
    with the point on the hull whose $x$-coordinate is minimal. If there
    are multiple such points, start with the one whose $y$-coordinate is minimal.


Sample Input 1
Sample Output 1




5
1 1 Y
1 -1 Y
0 0 N
-1 -1 Y
-1 1 Y




4
-1 -1
1 -1
1 1
-1 1",7.1,Hard,1 second,1024 MB,,
Plants vs Bad Guys,pvbg,0.01,5,2304,1507,1.7,Easy,https://open.kattis.com/problems/pvbg,"Oh no! There are a bunch of bad guys creeping around on
    Mikael’s lawn, and they all want to attack Mikael! Luckily,
    Mikael has planted several peashooters on his lawn that can
    protect him from the bad guys.
Mikael’s lawn consists of $N$ rows, where Mikael has planted
    $R_ i$ peashooters on row
    $i$. The peashooters only
    protect the row of the lawn where the peashooter is located,
    and each peashooter can protect the row from $1$ bad guy every wave. The bad guys
    come in waves. During the first wave, there will be
    $1$ bad guy on each row,
    during the second wave there will be $2$ bad guys on each row, and at wave
    number $t$, there will be
    $t$ bad guys on each row.
    Mikael will be attacked during a wave if the peashooters fail
    to protect any row from the naughty boys! In other words, if
    there is any row where there are more bad guys than there are
    peashooters, the bad guys will successfully reach Mikael (and
    maybe even eat him!!!).
How many waves of bad guys can Mikael’s peashooters protect
    him, before the bad guys manage to reach Mikael?
Input
The first line consists of an integer $(1 \leqslant N \leqslant 10^6)$, the
    number of rows on Mikael’s lawn. The second line consists of
    $N$ integers, where each
    integer $(1 \leqslant R_ i
    \leqslant 10^9)$ represents the number of peashooters
    located at row $i$.
Output
Print an integer $t$ -
    the first wave that will successfully breach the peashooters’
    defense and harm Mikael. In other words, the minimum value of
    $t$ for which the bad guys
    can pass through the lawn.
Grading
Your solution will be tested on a number of test-case
    groups. To receive points for a group, your solution must
    correctly solve every test-case in the group.



Group


Point value


Constraints




$1$


$10$


$R_ i \leqslant 9, N =
          5$




$2$


$40$


$R_ i \leqslant 10^3, N
          \leqslant 10^3$




$3$


$50$


No further restrictions





Sample Input 1
Sample Output 1



5
3 5 7 9 11



4






Sample Input 2
Sample Output 2



5
7 7 7 7 7



8






Sample Input 3
Sample Output 3



1
1



2",1.7,Easy,1 second,1024 MB,,
Kattis' Little Helpers,kattislittlehelpers,0.19,3721,48,10,7.6,Hard,https://open.kattis.com/problems/kattislittlehelpers,"Picture
        by Martin Fisch via Flickr, cc by-sa
      
It is not an easy life being an online judge. Kattis has
    lots of things to do and sometimes all her tasks can be
    overwhelming. For instance, to judge a submission, Kattis has
    to run all over cyberspace to figure out an appropriate
    verdict. First she has to go to Compiler Plaza and haggle with
    the merchants there to see if anyone is willing to compile the
    source code for her. Next she needs to go to the Data Market to
    pick up some fresh test cases to feed to the submission. With
    these things done she goes to the CPU track to let the code run
    for a while. Then she may have to do a quick stop at the
    hospital to patch the submission up in case it crashed. And it
    seems like it will never stop...

    But help is on its way! Kattis has recently acquired a
    number of programmable catbots, which she can send off on all
    these errands instead of going herself. Each catbot is equipped
    with a top-of-the-line MeowFi antenna, with which it can
    instantly transfer any materials it picks up at a location to
    all the other catbots. This means that different catbots could
    visit the different locations, as long as the locations are
    visited in order.
Kattis is very concerned about the future of our planet, and
    wants to perform her task in a resource-efficient way. The main
    resource used in this process is the energy needed for the
    catbots to move from place to place. Thus, Kattis wants to
    minimize the total number of steps taken by all the
    catbots.
For the purposes of this problem, cyberspace is a
    rectangular grid, in which catbots can move up, down, left, and
    right. Some squares in the grid are impassable walls. All
    catbots start at Kattis HQ, and must end at Kattis HQ after all
    the tasks are done. Your task is to write a program to find the
    minimum total number of steps, given the map of cyberspace and
    the tasks that need to be done. A task is considered performed
    if there is a catbot in the location of the task after the
    previous task has been performed. E.g., if we first move a
    catbot to the location of the second task, and then a catbot to
    the location of the first task, then both the tasks have been
    performed – the first catbot does not need to re-enter the
    location of the second task in order to perform it.
Consider a grid as in Figure 1 below, with access to
    two catbots and three places to visit. A good sequence of moves
    would then be to send the first catbot to location $1$ ($4$ steps), then the other catbot to
    location $2$ ($2$ steps), then the first catbot from
    location $1$ to location
    $3$ ($3$ steps) and finally to send both
    catbots home again ($5+2$
    steps), for a total of $16$ steps.




Figure 1: Illustration of Sample Input 1.
        


Input
The first line of input consists of four integers
    $w$, $h$, $c$, and $t$ ($1
    \le w, h, c, t \le 200$), where $w$ is the width and $h$ is the height of the cyberspace
    grid, $c$ is the number of
    catbots that Kattis has bought, and $t$ is the number of tasks that need
    to be performed.
Then follow $h$ lines,
    each containing $w$
    characters, giving a map of cyberspace. Each character is
    either a ‘#’ indicating an impassable
    wall, a ‘K’ indicating Kattis HQ, or
    a ‘.’ for the remaining positions.
    There is exactly one ‘K’ in the
    grid.
Then follow $t$ lines.
    The $i^\textrm {th}$ of
    these lines contains two integers $x_ i$ and $y_ i$ ($1 \le x_ i \le w$, $1 \le y_ i \le h$) indicating that
    the $i^\textrm {th}$
    location to visit is in column $x_ i$ of row $y_ i$ of the grid. The positions of
    these locations are not necessarily distinct, but will neither
    be walls nor Kattis HQ.
Output
Output the minimum total number of steps needed for the
    catbots to visit all the locations in order and return to
    Kattis HQ, or “impossible” if it is
    not possible to visit all the locations.


Sample Input 1
Sample Output 1




5 4 2 3
.....
...K.
.....
.....
1 1
5 1
1 4




16






Sample Input 2
Sample Output 2




5 4 2 3
.....
###K.
.....
.....
1 1
5 1
1 4




20






Sample Input 3
Sample Output 3




4 4 20 3
.K..
.#..
#.#.
.#..
1 1
2 3
1 1




impossible",7.6,Hard,2 seconds,1024 MB,,
Xor Maximization,xormax,0.0,5,945,264,6.2,Hard,https://open.kattis.com/problems/xormax,"Photo by Mark
        Ramsay


As you might have heard, Gunnar is an old and forgetful
    researcher. Most of his research is in security and he cares a
    bit too much about his own security, so for each website he has
    a different password. It would be very hard for him to remember
    all passwords, so for every website he only remembers the
    method he used to create the password.
For one of the very important websites he started with a
    file containing a long list of non-negative integers. Since he
    very much likes the operation $\oplus $ (xor), his password is a xor
    of some integers in the list. Note that the operation xor is
    defined on boolean values as $0\oplus 0=1\oplus 1=0$ and
    $0\oplus 1=1\oplus 0=1$.
    We can then extend this definition to integers, namely we first
    write the two integers in binary and then do xor for each two
    corresponding bits in the numbers. For example the xor of
    $12=(1100)_2$ and
    $5=(101)_2$ is
    $9=(1001)_2$. Instead of
    addition, we can use the operation xor when summing numbers and
    we call this modified sum xor-sum.
Task
Gunnar’s file contains a list of numbers and he selected a
    subset of the numbers such that its xor-sum is as large as
    possible. The resulting number was his password. Unfortunately,
    he forgot the algorithm to find the subset with the largest
    xor-sum, so he is asking you for help with restoring his
    password. Of course, he will not tell you for which website
    this password is.
Input
The first line of input contains an integer $n$ $(1\le n\le 100\, 000)$: the length of
    the list of numbers in Gunnar’s file. The second line contains
    $n$ space separated
    integers $a_1, \dots , a_
    n$ $(1\leq a_ i \le
    10^{18})$, the numbers in the file.
Output
Output one line with the answer – the maximal number Gunnar
    can get by selecting a subset of the list of numbers and
    calculating the xor-sum of the subset.


Sample Input 1
Sample Output 1




3
1 3 5




7






Sample Input 2
Sample Output 2




4
2 6 4 8




14",6.2,Hard,2 seconds,1024 MB,,
Reverse Rot,reverserot,0.0,67,6405,3669,1.7,Easy,https://open.kattis.com/problems/reverserot,"A very simplistic scheme, which was used at one time to
    encode information, is to rotate the characters within an
    alphabet and rewrite them. ROT13 is the variant in which the
    characters A-Z are rotated 13 places, and it was a commonly
    used insecure scheme that attempted to “hide” data in many
    applications from the late 1990’s and into the early
    2000’s.
It has been decided by Insecure Inc. to develop a product
    that “improves” upon this scheme by first reversing the entire
    string and then rotating it. As an example, if we apply this
    scheme to string ABCD with a reversal
    and rotation of 1, after the reversal we would have DCBA and
    then after rotating that by 1 position we have the result
    EDCB.
Your task is to implement this encoding scheme for strings
    that contain only capital letters, underscores, and periods.
    Rotations are to be performed using the alphabet order:

ABCDEFGHIJKLMNOPQRSTUVWXYZ_.

Note that underscore follows Z, and the period follows the
    underscore. Thus a forward rotation of 1 means A is shifted to B,
    that is:


A $\rightarrow $ B


B $\rightarrow $ C


$\vdots $


Z $\rightarrow $ _


_ $\rightarrow $ .


. $\rightarrow $ A


Likewise a rotation of 3 means:


A $\rightarrow $ D


B $\rightarrow $ E


$\vdots $


. $\rightarrow $ C


Input
The input is composed of $T$ test cases ($1 \leqslant T \leqslant 30$), each on
    one line.
Each input line will consist of an integer $N$, followed by a string.
    $N$ is the amount of
    forward rotation, such that $1
    \leqslant N \leqslant 27$. The string is the message to
    be encrypted, and will consist of 1 to 40 characters, using
    only capital letters, underscores, and periods.
The end of the input will be denoted by a final line with
    only the number 0.
Output
For each test case, display the “encrypted” message that
    results after being reversed and then shifted.


Sample Input 1
Sample Output 1




1 ABCD
3 YO_THERE.
1 .DOT
14 ROAD
9 SHIFTING_AND_ROTATING_IS_NOT_ENCRYPTING
2 STRING_TO_BE_CONVERTED
1 SNQZDRQDUDQ
0




EDCB
CHUHKWBR.
UPEA
ROAD
PWRAYF_LWNHAXWH.RHPWRAJAX_HMWJHPWRAORQ.
FGVTGXPQEAGDAQVAIPKTVU
REVERSE_ROT",1.7,Easy,1 second,1024 MB,,
Lektira,lektira,0.0,5,2847,1364,2.7,Easy,https://open.kattis.com/problems/lektira,"Mario is making up silly games again instead of reading
    Dostoevsky for school. The rules of his newest game follow.
    First he chooses a random word from the book. Then he splits
    the word in two arbitrary places to get three separate words.
    After that he reverses the order of the letters in each of
    those three words (exchanges the first and last letters, the
    second and second last and so on).
Finally, he puts the three words back together in the same
    order in which they were before splitting. The goal of the game
    is to obtain the lexicographically smallest word possible. In
    other words, of all words that can be obtained by the above
    procedure, find one which would be earliest in a
    dictionary.
Write a program that plays Mario’s game perfectly.
Input
The first and only line of input contains Mario’s chosen
    word, a string of lowercase letters of the English alphabet
    with no spaces.
The input word will be between $3$ and $50$ characters long (inclusive).
Output
Output the best word on a single line.


Sample Input 1
Sample Output 1




dcbagfekjih




abcdefghijk






Sample Input 2
Sample Output 2




mobitel




bometil






Sample Input 3
Sample Output 3




anakonda




aanadnok",2.7,Easy,1 second,1024 MB,,
Lost Map,lostmap2,0.25,1839,69,24,6.6,Hard,https://open.kattis.com/problems/lostmap2,"An amateur Viking historian needs your help finding the
    silver left by Egill Skallagrímsson, of Egil’s saga. She has
    found two old treasure maps that are supposed to lead to it. A
    treasure map is a list of instructions of the form “direction $k$”, where direction can be “n”, “s”, “e”, or “w”. The maps
    are sadly old, so some of the instructions are missing and we
    represent them with a simple “?” instead.
The first map is larger while the second map is a smaller
    fragment. She wants to know how she can overlay her maps such
    that they coincide.
Two maps coincide if the corresponding instructions are
    either identical or at least one of them is lost to time. All
    instructions must have a corresponding instruction on the other
    map when overlaying the maps.
Input


The first line of the input contains two integers,
        $1 \leq m < n \leq 4 \cdot
        10^5$.


The next $n$ lines
        describe the first map with each containing either “?”, or
        “(n|s|e|w)” followed by the number of steps $s$ $(1 \le s \le 7$).


The next $m$ lines
        describe the second map with each containing either “?”, or
        “(n|s|e|w)” followed by the number of steps $s$ $(1 \le s \le 7$).


Output
Output the number of indices such that if the second map was
    overlaid at this index on the first map then they would
    coincide.


Sample Input 1
Sample Output 1



4 3
n 4
e 1
?
s 5
?
e 1
?



2






Sample Input 2
Sample Output 2



4 3
n 4
e 1
w 3
s 5
?
e 1
?



1",6.6,Hard,23 seconds,1024 MB,,
Unread Messages,unreadmessages,0.0,58,1726,571,4.5,Medium,https://open.kattis.com/problems/unreadmessages,"There is a group of people in an internet email message
    group. Messages are sent to all members of the group, and no
    two messages are sent at the same time.
Immediately before a person sends a message, they read all
    their unread messages up to that point. Each sender also reads
    their own message the moment it is sent. Therefore, a person’s
    unread messages are exactly the set of messages sent after that
    person’s last message.
Each time a message is sent, compute the total number of
    unread messages over all group members.
Input
The first line of input contains two integers $n$ ($1
    \le n \le 10^9$) and $m$ ($1
    \le m \le 1\, 000$), where $n$ is the number of people in the
    group, and $m$ is the
    number of messages sent. The group members are identified by
    number, $1$ through
    $n$.
Each of the next $m$
    lines contains a single integer $s$ ($1
    \le s \le n$), which is the sender of that message.
    These lines are in chronological order.
Output
Output $m$ lines, each
    with a single integer, indicating the total number of unread
    messages over all group members, immediately after each message
    is sent.


Sample Input 1
Sample Output 1



2 4
1
2
1
2



1
1
1
1






Sample Input 2
Sample Output 2



3 9
1
2
3
2
1
3
3
2
1



2
3
3
4
3
3
5
4
3",4.5,Medium,1 second,2048 MB,,
Mag,mag,0.14,1153,110,34,7.6,Hard,https://open.kattis.com/problems/mag,"You are given an undirected tree1 with
    each of its node assigned a magic $X_ i$. The magic of a path2 is defined as the product of the
    magic of the nodes on that path divided by the number of the
    nodes on the path. For example, the magic of a path that
    consists of nodes with magic $3$ and $5$ is $7.5$ ($3\cdot 5 / 2$). In the given tree,
    find the path with the minimal magic and output the magic of
    that path.
Input
The first line of input contains the integer $N$ ($1
    \leq N \leq 10^6$), the number of nodes in the tree.
    Each of the following $N -
    1$ lines contains two integers, $A_ i$ and $B_ i$ ($1 \leq A_ i, B_ i \leq N$), the
    labels of nodes connected with an edge. The $i$-th of the following $N$ lines contains the integer
    $X_ i$ ($1 \leq X_ i \leq 10^9$), magic of the
    $i$-th node.
Output
Output the magic of the path with minimal magic in the form
    of a completely reduced fraction $P/Q$ ($P$ and $Q$ are relatively prime
    integers).
In all test cases, it will hold that the required
    $P$ and $Q$ are smaller than $10^{18}$.


Sample Input 1
Sample Output 1




2
1 2
3
4




3/1






Sample Input 2
Sample Output 2




5
1 2
2 4
1 3
5 2
2
1
1
1
3




1/2",7.6,Hard,5 seconds,1024 MB,,
Friday the 13th,friday,0.0,5,4112,2070,2.0,Easy,https://open.kattis.com/problems/friday,"On the planet Htrae Friday the 13th is a lucky day. You
    are going there on the next space ship and want to calculate
    how many times it happens during a given year. Unfortunately
    they change their calendar every year. Every year starts on a
    Sunday, but other than that, they change everything. They have
    released a list of calendar specifications for the next few
    years. A calendar specification consists of the total number of
    days in the year, the number of months in the year, and the
    number of days in each of the months.
Your task is to figure out how many times there will be
    Friday the 13th based on the calendar specifications.
Input
The first line of the input consists of a single integer,
    $T$, the number of test
    cases.
    The first line of each of the $T$ test cases is a line with two
    space separated integers, $D$ and $M$, the total number of days in the
    year and the number of months in the year respectively. The
    second line of each test case consists of $M$ space separated integers,
    $d_ i$, the number of days
    in each month.


$1 \leq T \leq
        20$


$1 \leq M \leq D \leq
        1000$


$1 \leq d_ i \leq
        100$


$\sum (d_ i) =
        D$


Output
For each test case, output the number of Friday the 13ths in
    the specified year.


Sample Input 1
Sample Output 1




3
20 1
20
40 2
21 19
365 12
31 28 31 30 31 30 31 31 30 31 30 31




1
2
2",2.0,Easy,1 second,1024 MB,,
Chinese Remainder,chineseremainder,0.0,5,5887,1590,4.1,Medium,https://open.kattis.com/problems/chineseremainder,"Input
The first line of input consists of an integers $T$ where $1 \leq T \leq 1000$, the number of
    test cases. Then follow $T$ lines, each containing four
    integers $a$, $n$, $b$, $m$ satisfying $1 \leq n, m \leq 10^9$, $0 \leq a < n$, $0 \leq b < m$. Also, you may
    assume $\mbox{gcd}(n, m) =
    1$.
Output
For each test case, output two integers $x$, $K$, where $K = nm$ and $0 \leq x < K$, giving the solution
    $x \pmod K$ to the
    equations $x = a \pmod n, x = b
    \pmod m$.


Sample Input 1
Sample Output 1




2
1 2 2 3
151 783 57 278




5 6
31471 217674",4.1,Medium,1 second,1024 MB,,
Sauna,sauna,0.0,106,1366,605,1.4,Easy,https://open.kattis.com/problems/sauna,"Kaisa and her friends are going to the sauna!
Now they have to pick the temperature. Each of them has
    their own temperature preferences as an inclusive range of
    acceptable values. Can you help them find the temperatures that
    everyone is happy with?
Since there might be a large number of possible
    temperatures, they have asked you to just tell them how many
    options there are and what the lowest temperature that works
    for everyone is, as then the sauna will need less time to heat
    up.
Input
The first line of input contains an integer, $N$, the number of people in the group
    ($2 \le N \le 2 \cdot
    10^5$). The next $N$ lines each contains two integers,
    $a_i$ and $b_i$, indicating that the
    $i$th person’s temperature
    preference is between $a_i$ and $b_i$, inclusive. Temperatures are
    given in millidegrees Celsius, with $0 \le a_i \le b_i \le 2 \cdot
    10^5$.
Output
Output two integers: first, the number of different
    temperatures (in millidegrees Celsius) that fit all
    preferences; and second, the lowest such value.
If there are no values that fit all preferences, instead
    output “bad news”.
Explanation for sample 1
There are three possible temperatures that all three people
    will be happy with: 70003, 70004, 70005.


Sample Input 1
Sample Output 1



3
70000 70005
70003 70010
65000 80000



3 70003






Sample Input 2
Sample Output 2



2
70000 70500
80000 80100



bad news",1.4,Easy,1 second,1024 MB,,
Symmetry,symmetry,0.49,1321,571,119,7.6,Hard,https://open.kattis.com/problems/symmetry,"You are totally bored with nothing to do. You notice a
    pattern of spots on the wall in front of you and begin to dwell
    on them. There is no obvious pattern of symmetry. With time
    this becomes very grating, and you contemplate adding more
    spots to satisfy your quest for balance. For this exercise you
    are to resolve this situation with a computer program.



Given an array of spots with coordinates in the range from
    $-20\, 000$ to
    $20\, 000$, determine the
    fewest additional spots needed to generate a pattern with some
    symmetry. The symmetry can be around a point or across a line.
    If the symmetry is around a point, the point does not need to
    be a spot in the data, or even a point with integral
    coordinates. If the symmetry is across a line, the line may be
    at any angle. The coordinates of the additional spots may or
    may not be within the $-20\,
    000$ to $20\, 000$
    limits.
Input
Each input will consist of a single test case. Note that
    your program may be run multiple times on different inputs. The
    first line of input will consist of a single integer
    $n$ ($1 \le n \le 1\, 000$) indicating the
    number of spots. Each of the next $n$ lines will hold two
    space-separated integers $x$ and $y$ ($-20\, 000 \le x,y \le 20\, 000$),
    which are the coordinates of a spot. The locations of all spots
    are guaranteed to be unique.
Output
Output a single integer, indicating the smallest number of
    spots which need to be added so that all of the spots are
    symmetric about some point, or about some line.


Sample Input 1
Sample Output 1




4
0 0
1000 0
0 1000
1000 1000




0






Sample Input 2
Sample Output 2




11
0 0
70 100
24 200
30 300
480 400
0 100
0 200
0 400
100 0
300 0
400 0




6",7.6,Hard,5 seconds,1024 MB,,
Jobs,jobs,0.15,1130,142,65,7.3,Hard,https://open.kattis.com/problems/jobs,"You have a successful business where you make money by
    completing jobs for your clients. Currently, you can choose
    from $N$ one-time jobs,
    numbered from $1$ to
    $N$.
Completing job $i$ will
    make you a profit of $x_
    i$ euros. The profit may also be negative ($x_ i < 0$).
Some jobs depend on another job. That is, there may be a job
    numbered $p_ i$ that must
    be completed before the $i$-th job can be started. Hence, a
    job with a large profit may be less attractive than it seems if
    it depends on a job with a negative profit. If $p_ i = 0$, the $i$-th job has no dependency.
You currently have $s$
    euros and can decide which jobs to do and in which order to do
    them, as long as the dependencies are respected. Moreover, the
    amount of money you own may not become negative at any
    point.
Task
Calculate the maximum profit you can make by choosing to
    complete some (possibly none) of the $N$ jobs in a selected order.
Input
The first line contains two integers $N$ and $s$ – the number of jobs and the
    amount of money you initially own respectively.
Then, $N$ lines follow.
    The $i$-th of them
    contains two integers $x_
    i$ and $p_ i$ – the
    profit and the number of the prerequisite job for the
    $i$-th job, respectively.
    If $p_ i = 0$, the
    $i$-th job does not have a
    job dependency.
Output
Your program should output a single integer – the maximum
    profit that you can make.

Examples
To maximize profit, you should pick jobs 1, 4, 3 and 5 in
    the following order:


Job 1: money $1
        \rightarrow 4$,


Job 4 (prerequisite 1 complete): money $4 \rightarrow 6$,


Job 3: money $6
        \rightarrow 1$,


Job 5 (prerequisite 3 complete): money $1 \rightarrow 7$.


Overall, the total profit is $7 - 1 = 6$ (current money minus
    starting money).
Constraints


$1 \leq N \leq 3 \cdot
        10^5$


$0 \leq s \leq
        10^{18}$


$-10^9 \leq x_ i \leq
        10^9$ (for all $1 \leq
        i \leq N$)


$0 \leq p_ i <
        i$ (for all $1 \leq i
        \leq N$)


Subtasks



No.


Points


Additional constraints




1


11


$s =
          10^{18}$.




2


14


$N \leq 2000$ and
          for all jobs, either $p_ i
          = 0$, or $p_ i = i -
          1$.




3


15


For all jobs, either $p_
          i = 0$, or $p_ i = i
          - 1$.




4


29


$N \leq
          2000$.




5


31


No additional constraints.





Sample Input 1
Sample Output 1



6 1
3 0
-3 1
-5 0
2 1
6 3
-4 5



6",7.3,Hard,2 seconds,1024 MB,,
Bishops,bishops,0.0,5,5800,2200,2.4,Easy,https://open.kattis.com/problems/bishops,"Yesterday was Sam’s birthday. The most interesting gift was
    definitely the chessboard. Sam quickly learned the rules of
    chess and defeated his father, all his friends, his little
    sister, and now no one wants to play with him any more.
So he decided to play with another birthday gift – a Book of
    Math Problems for Young Mathematicians. He opened the book
    somewhere in the middle and read the following problem: ""How
    many knights can be placed on a chessboard without threatening
    each other?"" After a while he realized that this was trivial
    and moved on to the next problem: ""How many bishops can be
    placed on a chessboard without threatening each other?"". Sam is
    in trouble here. He is not able to solve this problem and needs
    your help.
Task
Sam’s chessboard has size $N\times N$. A bishop can move to any
    distance in any of the four diagonal directions. A bishop
    threatens another bishop if it can move to the other bishop’s
    position. Your task is to compute the maximum number of bishops
    that can be placed on a chessboard in such a way that no two
    bishops threaten each other.
Input
The input file consists of several lines. The line number
    $i$ contains a positive
    integer representing the size of the $i$-th chessboard. The size of each
    chessboard is at most $1\, 000\,
    000$.
Output
The output file should contain the same number of lines as
    the input file. The $i$-th
    line should contain one number – the maximum number of bishops
    that can be placed on $i$-th chessboard without threatening
    each other.


Sample Input 1
Sample Output 1




2
3




2
4",2.4,Easy,1 second,1024 MB,,
Preludes,chopin,0.0,115,3077,1534,2.0,Easy,https://open.kattis.com/problems/chopin,"Frederic Chopin was a Polish music composer who lived from
    1810–1849. One of his most famous works was his set of
    preludes. These $24$
    pieces span the $24$
    musical keys (there are musically distinct $12$ scale notes, and each may use
    major or minor tonality). The $12$ distinct scale notes
    are:\[
    \begin{array}{|*{12}{c|}} \hline 1 & 2 & 3 & 4
    & 5 & 6 & 7 & 8 & 9 & 10 & 11 &
    12 \\ A & A\sharp = B\flat & B & C & C\sharp =
    D\flat & D & D\sharp = E\flat & E & F &
    F\sharp = G\flat & G & G\sharp = A\flat \\ \end{array}
    \]
Five of the notes have two alternate names, as is indicated
    above with the equals sign (e.g. $C\sharp = D\flat $ means that note
    has two names, $C\sharp $
    and $D\flat $). Thus,
    there are $17$ possible
    names for the scale notes, but only $12$ musically distinct notes. When
    using one of these as the keynote for a musical key, we can
    further distinguish between the major and minor tonalities.
    This gives $34$ possible
    keys, of which $24$ are
    musically distinct.
In naming his preludes, Chopin used all the keys except for
    the following $10$ (which
    were named instead by their alternate names):\[ \begin{array}{*{5}{c}} A\flat \text {
    minor} & A\sharp \text { major} & A\sharp \text {
    minor} & C\sharp \text { major} & D\flat \text { minor}
    \\ D\sharp \text { major} & D\sharp \text { minor} &
    G\flat \text { major} & G\flat \text { minor} & G\sharp
    \text { major} \end{array} \]
Write a program that, given the name of a key, will give an
    alternate name (if it has an alternate) or report that the key
    name is unique.
Input
Each input line contains one test case. There are at least
    one and at most five cases, and the end of input is at the end
    of file. Each line has the format “note
    tonality”, where note is one of the
    $17$ names for the scale
    notes given above, and tonality is either
    major or minor. All
    note names will be upper-case, and the two accidentals
    ($\sharp $ and
    $\flat $) will be written
    as # and b,
    respectively.
Output
For each case, output ‘Case X:’ (where
    X is the case number starting at
    $1$), followed by a space.
    Then output the alternate key name, if it exists, or print
    UNIQUE if the key name is unique.


Sample Input 1
Sample Output 1




Ab minor
D# major
G minor




Case 1: G# minor
Case 2: Eb major
Case 3: UNIQUE",2.0,Easy,1 second,1024 MB,,
Mixing Colours,mixingcolours,0.48,1207,133,46,6.7,Hard,https://open.kattis.com/problems/mixingcolours,"Frank lives in London and he really likes games and maths.
    Lately, he has been playing a game on his mobile phone. It is
    simple, a sequence of coloured tokens is provided and each turn
    the player has to combine a pair of adjacent tokens to obtain a
    new token of certain colour. This process is repeated until the
    whole sequence results in only one final token. The problem is
    that not every pair of colours can be merged. There is a set of
    rules describing the allowed combinations. For example, given
    the following rules\begin{equation*} \begin{matrix} \text {blue}
    & + & \text {yellow} & \to & \text {green} \\
    \text {yellow} & + & \text {red} & \to & \text
    {orange} \\ \text {blue} & + & \text {orange} & \to
    & \text {brown} \\ \end{matrix}\end{equation*}
and the sequence (blue, yellow, red), the game could be
    finished obtaining a brown token
    after two steps: $(\mathtt{blue},
    \mathtt{yellow}, \mathtt{red}) \to (\mathtt{blue},
    \mathtt{orange}) \to (\mathtt{brown})$.
Frank is now in Valencia attending a famous programming
    contest and he is waiting for the tram to go to the university.
    Meanwhile, he is playing this game to fill time but the sun is
    shining so bright that he can not properly see the screen of
    his phone. He has some certainty about the possible colour of
    each token and he is wondering what will be the resulting
    colour following the most likely play of the game according to
    his estimation of the input sequence. Given Frank’s estimation
    of two colours A and B, and the combination $\texttt{A} + \texttt{B} \to
    \texttt{C}$, the certainty of the obtained colour
    C is computed as $\mathsf{cer}(\mathtt{C}) =
    \mathsf{cer}(\mathtt{A}) \cdot
    \mathsf{cer}(\mathtt{B})$.
Input
The first line contains $R$ ($0
    < R \leq 100$) the number of rules describing the
    allowed combinations of colours. Each of the following
    $R$ lines contains three
    strings $s_1$,
    $s_2$, $s_3$ representing the combination
    $s_1 + s_2 \to s_3$. Next
    line shows the number of test cases $T$. For each test case an integer
    $C$ indicates the length
    of the input sequence of tokens ($0 < C \leq 500$). Each of the next
    $C$ lines describes a
    token, it contains a list of pairs $(k, \mathsf{cer}(k))$ providing a
    colour $k$ and its
    corresponding certainty ($0 <
    \textsf{cer}(k) \leq 1.0$). The list ends with the word
    END. The sum of the certainties for a
    certain token always is $1.0$. Every colour in a test case has
    appeared first in the rules describing the game.
Output
For each test case, print the resulting colour of the most
    likely play of the game. If there is no possible combination to
    finish the game then print GAMEOVER.


Sample Input 1
Sample Output 1




7
Blue Yellow Green
Yellow Red Orange
Green Red Yellow
White Red Pink
Pink Black Red
Orange Red Red
Yellow Orange Yellow
3
2
Red 0.7 Orange 0.3 END
Yellow 1.0 END
4
Blue 0.6 Green 0.4 END
Red 0.2 Orange 0.6 Yellow 0.2 END
White 0.9 Yellow 0.1 END
Red 0.5 Black 0.5 END
2
Blue 1.0 END
Orange 1.0 END




Orange
Yellow
GAMEOVER",6.7,Hard,14 seconds,1024 MB,,
Average Rank,averagerank,0.24,558,641,180,6.7,Hard,https://open.kattis.com/problems/averagerank,"The National Weekly Escape Room Challenge (NWERC) is a
    long-running competition held in Eindhoven. Every week a new
    escape room is presented, and anyone who completes it in their
    first attempt gains one point.
At the end of each week, competitors are ranked by the total
    number of points accumulated so far, highest first. In case of
    a tie, they share the same rank. In other words, the rank of a
    competitor is one more than the number of people with a
    strictly larger number of points.




Figure 1: Illustration of Sample Input 3.
        


In total there have been $n$ participants in the contest, and
    the contest has been going for $w$ weeks. For each week you are given
    a list of the competitors that gained a point that week. Your
    task is to calculate the average rank during the $w$-week competition for each
    competitor.
Figure 1 illustrates the score progression in the third
    sample.
Input
The input consists of:


One line with two integers $n$ and $w$ ($1 \le n, w \le 3 \cdot 10^5$),
        the number of competitors and the number of weeks. The
        competitors are numbered from $1$ to $n$.


$w$ lines (one for
        each week), each containing an integer $k$ ($0 \le k \le n$) followed by
        $k$ distinct integers
        $c_1, \ldots , c_ k$
        ($1 \le c_ i \le n$
        for all $i$),
        indicating that the $k$ competitors $c_1, \ldots , c_ k$ each gained a
        point that week.


The total number of points awarded is at most $1$ million.
Output
Output $n$ lines, the
    $i$th of which contains
    the average rank of the $i$th competitor during the
    $w$-week competition. Your
    answers should have an absolute or relative error of at most
    $10^{-6}$.


Sample Input 1
Sample Output 1



3 2
2 1 2
2 1 3



1.000000
1.500000
2.500000






Sample Input 2
Sample Output 2



3 1
0



1.000000
1.000000
1.000000






Sample Input 3
Sample Output 3



5 6
2 3 5
2 3 1
0
3 3 5 2
3 5 4 2
2 3 4



3.166666667
3.333333333
1.000000000
3.833333333
1.666666667",6.7,Hard,4 seconds,1024 MB,,
Safety in Numbers,safety,0.0,262,494,110,4.9,Medium,https://open.kattis.com/problems/safety,"There are $N$
    contestants in a reality TV show. Each contestant is assigned a
    point value by the judges and receives votes from the audience.
    The point value given by the judges and the audience’s votes
    are combined to form a final score for the contestant,
    in the following way:
Let $X$ be the sum of
    the judge-assigned point values of all contestants. Now suppose
    a contestant got $J$
    points from the judges, and that she received a fraction
    $Y$ (between 0 and 1,
    inclusive) of the audience’s votes ($Y$ might be, for example, 0.3). Then
    that contestant’s final score is $J+XY$. Note that the sum of all
    contestants’ audience vote fractions must be 1.
The contestant with the lowest score is eliminated.
Given the points contestants got from judges, your job is to
    find out, for each contestant, the minimum percentage of
    audience votes he/she must receive in order for him/her to be
    guaranteed not to be eliminated, no matter how the rest of the
    audience’s votes are distributed.
If the lowest score is shared by multiple contestants, no
    contestants will be eliminated.
Input
The first line of the input gives the number of test cases,
    $T$. $T$ test cases follow, one per line.
    Each line starts with an integer $N$, the number of contestants,
    followed by a space, followed by $N$ integers $s_0, s_1, \ldots , s_{N-1}$,
    separated by single spaces. The integer $s_ i$ is the point value assigned to
    contestant $i$ by the
    judges.
Output
For each test case, output one line containing Case
    #x: followed by $N$
    real numbers: $m_ i$s. The
    value $x$ is the case
    number (starting from 1). The value $m_ i$ is the smallest percentage of
    audience votes required for contestant $i$ to definitely avoid
    elimination.
Answers within an absolute or relative error of $10^{-5}$ of the correct answer will
    be accepted.
Limits
$0 \leq s_ i \leq 100$.
    $s_ i > 0$ for some
    $i$. This means at least
    one contestant will have a point value greater than 0.
    $1 \leq T \leq 50$.
    $2 \leq N \leq 200$.


Sample Input 1
Sample Output 1




4
2 20 10
2 10 0
4 25 25 25 25
3 24 30 21




Case #1: 33.333333 66.666667
Case #2: 0.000000 100.000000
Case #3: 25.0 25.0 25.0 25.0
Case #4: 34.666667 26.666667 38.666667",4.9,Medium,1 second,1024 MB,,
Greedy Polygons,greedypolygons,0.0,89,1552,1064,1.9,Easy,https://open.kattis.com/problems/greedypolygons,"People are rarely content with what they have — they
    always seem to want more. Sometimes this is just healthy
    ambition, but at other times it is clearly motivated by shallow
    materialism, or worse. Perhaps we could accept this as an
    unavoidable aspect of human nature, but the problem is that
    this mindset appears to be spreading rapidly to the world of
    mathematics and computer science. For example, greedy
    algorithms are already well known for taking as much as they
    can in each iteration, but now geometric shapes are getting in
    on the act! So far, only regular polygons have been affected,
    but who knows where it will end?
In a regular $n$-sided
    polygon ($n$-gon), all
    $n$ sides are of equal
    length, and all interior angles are the same. (For our
    purposes, a polygon includes its interior, i.e., it is a solid
    shape.) In the past, the area of a regular $n$-gon with a given side
    length was fixed, which was very convenient for students tasked
    with calculating its area, but now, whenever it gets the
    chance, a regular $n$-gon will
    carry out an expansion operation informally known as a “land
    grab.” A land grab with expansion distance $d > 0$ works as follows: every
    point outside the regular $n$-gon that
    is at most distance $d$ from some point in the regular
    $n$-gon is absorbed and becomes
    a part of the enlarged $n$-gon.
    Over time, a regular $n$-gon
    might carry out many land grabs. (Technically, a regular
    $n$-gon ceases to be a regular
    $n$-gon after the first such
    land grab, but, sadly, it doesn’t notice that its greed is
    causing it to lose its identity.) Figure $1$ depicts the two test cases in the
    sample input: a regular $3$-gon
    (triangle) after a single land grab, and a regular $4$-gon (square) after two land
    grabs.
Given an initial regular $n$-gon and
    an expansion distance $d$,
    what is the area of the resulting region after a specified
    number of land grabs?




Figure 1: Illustration of test cases in Sample
          Input $1$



Input
The first line of input contains an integer, $N$, the number of test cases
    ($1 \leq N \leq 100$). Each of
    the next $N$ lines
    contains the information for a single regular $n$-gon, given as four
    space-separated integers, $n$ $\ell $ $d$ $g$, where $n$ is the initial number of sides
    ($3 \leq n \le 60$),
    $\ell $ is the initial
    side length, $d$ is the
    expansion distance ($1 \leq \ell , d \leq
    10$), and $g$ is the number of land grabs
    ($0 \leq g \leq 20$).
Output
For each test case, output the area of the region occupied
    by the $n$-gon after $g$ land grabs. Each area will be
    considered correct if it is within $10^{-6}$ of the official answer.


Sample Input 1
Sample Output 1



2
3 8 1 1
4 5 2 2



54.85440557469184
155.2654824574367",1.9,Easy,1 second,1024 MB,,
The Uncertainty of Politics,politics,0.01,257,316,127,5.4,Medium,https://open.kattis.com/problems/politics,"You have an upcoming trip to Washington D.C. and you are
    fascinated with the intricacies of Congressional committee
    hearings. You wish to attend as many hearings as possible
    during your trip, and your local representative has provided
    you with a pass that will get you into the audience of any
    hearing. But there are some challenges in planning your
    schedule. Specifically:

     


There are many committees, and thus many hearings, some
        of which take place at overlapping times.


While the committees are extremely punctual in terms of
        when to start a hearing, they are notoriously unpredictable
        in terms of how long the hearing lasts. Fortunately, rules
        do not actually allow for a filibuster of a committee
        hearing, so they cannot last forever.


It is considered rude to enter a hearing that is already
        underway, or to leave a hearing before it is complete.
        Given that you do not wish to embarrass the representative
        who provided your tickets, if you attend you must attend
        the entire hearing. Fortunately, hearings are very near to
        each other; as soon as one hearing is done, you can
        immediately join another hearing that is about to
        start.


Well in advance of your trip, Congress publishes a schedule
    of hearings, indicating for each one the time $s$ at which the hearing will start,
    and then values $a$ and
    $b$ which represent,
    respectively, the shortest and longest possible length of that
    particular hearing. You are to assume that the actual length of
    the hearing will be a uniformly random integer over
    the inclusive interval $[a,b]$.
Your goal is to develop a strategy that maximizes the
    expected number of hearings that you can attend during your
    trip. As an example, consider a situation in which there are
    four hearings with parameters as follows:




hearing


$s$


$a$


$b$




Social media and elections


1


1


7




NASA missions


3


2


3




Oil and gas exploration


5


1


4




Hurricane recovery efforts


6


10


10




For this schedule, the optimal strategy will allow you to
    achieve an expected value of $2.125$ hearings. To achieve this, you
    begin by attending the NASA hearing, which starts at time
    $3$ and ends with equal
    probability at either time $5$ or time $6$ (given the hearing length that is
    uniformly distributed over $\{ 2,
    3\} $). If the NASA hearing does end at
    time $5$ you will
    immediately head to the oil and gas exploration hearing, and
    there is a $\frac{1}{4}$
    chance that hearing will end at time $6$, allowing you to make yet a third
    hearing (about hurricane recovery efforts). If the NASA hearing
    instead ends at time $6$, you will go straight to the
    hurricane hearing.
By this strategy you will attend $3$ hearings 12.5% of the time and
    $2$ hearings the other
    87.5% of the time, and thus expected value of $2.125$. Note that if you were to
    start by attending the social media and elections hearing, you
    might optimistically make four hearings. However, a careful
    analysis will demonstrate that if you attend the first hearing,
    your optimal expected value is only $2.10714$.
Input
The input begins with an integer $n$ that designates the total number
    of scheduled hearings ($1 \leq n
    \leq 10^4$). Following that are $n$ lines, each containing three
    integers $s$, $a$, and $b$, respectively representing the
    start time, minimum length, and maximum length of a hearing,
    such that $1 \leq s \leq
    10^6$ and $1 \leq a \leq b
    \leq 10^6$. The hearings will be listed in nondecreasing
    order of their start times.
Output
Display the expected number of hearings of an optimal
    strategy. Your answer should have an absolute or relative error
    of at most $10^{-3}$.


Sample Input 1
Sample Output 1




4
1 1 7
3 2 3
5 1 4
6 10 10




2.125






Sample Input 2
Sample Output 2




5
1 1 7
1 1 6
3 2 3
5 1 4
6 10 10




2.29166667",5.4,Medium,5 seconds,1024 MB,,
Join Strings,joinstrings,0.01,104,54414,7891,4.3,Medium,https://open.kattis.com/problems/joinstrings,"You are given a collection of $N$ non-empty strings, denoted by
    $S_1, S_2, \ldots , S_ n$.
    Then you are given $N$-$1$ operations which you execute in
    the order they are given. The $i^{th}$ operation is has the
    following format: ‘$a$
$b$’ ($1$-based indexing, without the
    quotes), which means that you have to make the following
    changes:


$S_ a = S_ a + S_
        b$, i.e. concatenate $a^{th}$ string and $b^{th}$ string and store the
        result in $a^{th}$
        string,


$S_ b$ = """", i.e. make the $b^{th}$ string empty, after doing
        the previous step.


You are ensured that after the $i^{th}$ operation, there will be no
    future operation that will be accessing $S_ b$. Given these operations to join
    strings, print the last string that will remain at the end of
    this process.
Input
The first line contains an integer $N$ ($1
    \le N \le 10^5$) denoting the number of strings given.
    Each of the next $N$ lines
    contains a string denoting the $S_ i$. All the characters in the
    string $S_ i$ are
    lowercase alphabets from ‘a’ to ‘z’. The total number of
    characters over all the strings is at most $10^6$, i.e $\sum _{i = 1}^{N}|S_ i| \leq 10^6$,
    where $|S_ i|$ denotes the
    length of the $i^{th}$
    string. After these $N$
    strings, each of the next $N$-$1$ lines contain two integers
    $a$ and $b$, such that $a \neq b$ and $1 \le a, b \le N$ denoting the
    $i^{th}$ operation.
Output
Print the last string which remains at the end of the
    $N$-$1$ operations.
Warning
The I/O files are large. Please use fast
    I/O methods.


Sample Input 1
Sample Output 1



4
cute
cat
kattis
is
3 2
4 1
3 4



kattiscatiscute






Sample Input 2
Sample Output 2



3
howis
this
practicalexam
1 2
1 3



howisthispracticalexam",4.3,Medium,1 second,1024 MB,,
Animal Classification,animal,0.03,370,2205,549,6.6,Hard,https://open.kattis.com/problems/animal,"Alice and Bob are biologists. They like to group animals
    using classification trees. A classification tree is a binary
    tree where the leaves are labeled by the animals.
For example, Figure 1 below shows the classification of
    $5$ animals (labeled as
    $1, 2, 3, 4, 5$) by Alice
    and Bob. Alice’s classification has nine groups: $\{ 1\} $, $\{ 2\} $, $\{ 3\} $, $\{ 4\} $, $\{ 5\} $, $\{ 2, 5\} $, $\{ 1, 2, 5\} $, $\{ 1, 2, 3, 5\} $ and $\{ 1, 2, 3, 4, 5\} $. Bob’s
    classification also has nine groups: $\{ 1\} $, $\{ 2\} $, $\{ 3\} $, $\{ 4\} $, $\{ 5\} $, $\{ 1, 5\} $, $\{ 2, 3\} $, $\{ 1, 2, 3, 5\} $ and $\{ 1, 2, 3, 4, 5\} $.




Figure 1: Illustration of Sample Input 1
        


As you can observe, Alice and Bob classify the animals
    differently. Carol is interested to know the number of common
    groups between the classifications of Alice and Bob. For the
    above example, there are $7$ common groups. They are:
    $\{ 1\} $, $\{ 2\} $, $\{ 3\} $, $\{ 4\} $, $\{ 5\} $, $\{ 1, 2, 3, 5\} $ and $\{ 1, 2, 3, 4, 5\} $.
Carol usually counts the number of common goups by hand. On
    one day, an outer space alien came to our earth. He asked Alice
    and Bob to classify aliens in outer space. The number
    $N$ of aliens can be as
    big as $100\, 000$. It is
    impossible to count the number of common goups by hand now. Can
    you make a program to help Carol?
Input
The input consists of three lines:


one line with one integer $N$ ($1 \leq N \leq 100\, 000$)


the classification tree of Alice


the classification tree of Bob


Note that both classification trees are leaf-labeled by
    $1$ to $N$. The tree is represented by the
    parathesis encoding. (Note that the encoding only have numbers
    and $3$ symbols, that is,
    ‘(’, ‘)’, ‘,’.) For the example in Figure 1, see Sample
    Input 1.
Output
Output one line with a single integer that represents the
    number of common groups between Alice and Bob’s classification
    trees.


Sample Input 1
Sample Output 1




5
((3,(1,(5,2))),4)
(((5,1),(2,3)),4)




7






Sample Input 2
Sample Output 2




10
(1,(2,(3,(4,(5,(6,(7,(8,(9,10)))))))))
(((((((((1,2),3),4),5),6),7),8),9),10)




11






Sample Input 3
Sample Output 3




10
(10,(9,(8,(7,(6,(5,(4,(3,(2,1)))))))))
(((((((((1,2),3),4),5),6),7),8),9),10)




19",6.6,Hard,2 seconds,1024 MB,,
Copying DNA,copyingdna,0.03,970,662,168,7.9,Hard,https://open.kattis.com/problems/copyingdna,"Evolution is a seemingly random process which works in a way
    which resembles certain approaches we use to get approximate
    solutions to hard combinatorial problems. You are now to do
    something completely different.
Given a DNA string $S$
    from the alphabet {A,C,G,T}, find the
    minimal number of copy operations needed to create another
    string $T$. You may
    reverse the strings you copy, and copy both from $S$ and the pieces of your partial
    $T$. You may put these
    pieces together at any time. You may only copy contiguous parts
    of your partial $T$, and
    all copied strings must be used in your final $T$. Example: From $S$ = “ACTG”
    create $T$ = “GTACAATTAAT”


Get GT......... by copying and
        reversing “TG” from $S$.


Get GTAC....... by copying
        “AC” from $S$.


Get GTAC...TA.. by copying
        “TA” from the partial
        $T$.


Get GTAC...TAAT by copying and
        reversing “TA” from the partial
        $T$.


Get GTACAATTAAT by copying
        “AAT” from the partial
        $T$.


Input
The first line of input gives a single integer, $1 \leq t \leq 100$, the number of
    test cases. Then follow, for each test case, a line with the
    string $S$ of length
    $1 \leq m \leq 18$, and a
    line with the string $T$
    of length $1 \leq n \leq
    18$.
Output
Output for each test case the number of copy operations
    needed to create $T$ from
    $S$, or “impossible” if it cannot be done.


Sample Input 1
Sample Output 1




5
ACGT
GTAC
A
C
ACGT
TGCA
ACGT
TCGATCGA
A
AAAAAAAAAAAAAAAAAA




2
impossible
1
4
6",7.9,Hard,2 seconds,1024 MB,,
Avoiding the Abyss,avoidingtheabyss,0.0,86,944,287,3.2,Medium,https://open.kattis.com/problems/avoidingtheabyss,"This picture represents sample 1. The path taken avoids the
        hidden pool, but based on the information given it could
        also have intersected it. So the sample solution was quite
        lucky here.
      

You are standing on a point with integer coordinates
    $(x_s, y_s)$. You want to
    walk to the point with integer coordinates $(x_t, y_t)$. To do this, you can walk
    along a sequence of line segments. But there is a swimming pool
    in your way. The swimming pool is an axis aligned rectangle
    whose lower left corner is on the point $(x_l, y_l)$ and the upper right
    corner is on the point $(x_r,
    y_r)$. You cannot ever cross the swimming pool, not even
    on the border. However, it is dark and you do not know the
    coordinates $(x_l, y_l)$
    and $(x_r, y_r)$. Instead,
    you threw a rock into the pool which revealed that the point
    $(x_p, y_p)$ is in the
    pool (or on the boundary).
Find a way to walk from the start to the end point along a
    sequence of line segments, so that you never cross the swimming
    pool.
Input
The first line contains two integers $x_s$ and $y_s$ ($-10^4 \leq x_s, y_s \leq 10^4$).
The second line contains two integers $x_t$ and $y_t$ ($-10^4 \leq x_t, y_t \leq 10^4$).
The third line contains two integers $x_p$ and $y_p$ ($-10^4 \leq x_p, y_p \leq 10^4$).
The problem is not adaptive, i.e. for every test case there
    exist four integers $x_l, y_l,
    x_r, y_r$ ($-10^4 \leq x_l
    < x_r \leq 10^4$, $-10^4 \leq y_l < y_r \leq 10^4$)
    that constitute a swimming pool. The start and end points are
    always strictly outside the swimming pool, and the point
    $(x_p,y_p)$ is inside (or
    on the border). The start and end points are always distinct.
    Note that the problem is technically interactive, so the input
    will not contain an EOF character.
Output
First, print one integer $N$ ($0
    \leq N \leq 10$), the number of points in between the
    start and end point that you want to visit. Then, print
    $N$ lines, the
    $i$th containing two
    integers $x_i, y_i$. These
    coordinates must satisfy $-10^9
    \leq x_i, y_i \leq 10^9$. Note that these are not the
    same bounds than on the other coordinates.
This means that you will walk along straight line segments
    between $(x_s, y_s), (x_1, y_1),
    \dots , (x_N, y_N), (x_t, y_t)$ such that none of the
    line segments touch the swimming pool. It can be proven that a
    solution always exists.


Sample Input 1
Sample Output 1



0 0
4 4
2 2



2
0 3
1 4",3.2,Medium,1 second,1024 MB,,
Going in Circles,goingincircles,0.02,136,637,163,5.4,Medium,https://open.kattis.com/problems/goingincircles,"Train. Unsplash License by Robin Ulrich on Unsplash

Hercule Poirot, world-renowned detective, was having a
    lovely cup of tea in his compartment on the Disorient Express
    when the train conductor rushed in. “We have lost track of the
    number of train carriages,” exclaimed the conductor. You see,
    this was no ordinary train, and had no first or last train
    carriage. Instead, the train carriages were connected to form a large cycle,
    causing the conductor’s confusion.
    Hercule thought for a moment. “That is most peculiar,” he
    said. “But I may be able to help you.” He reached over and
    grabbed the lamp from the side table. “You see, each train
    carriage has a light switch like this one. By moving between
    the carriages and toggling these switches, we can determine the
    number of train carriages.”
The conductor was sceptical, but agreed to try it. “We are
    in a hurry,” he said, “so please determine $n$, the number of carriages that the
    train consists of, in at most $3n+500$ steps.” Here a step counts as
    either moving to an adjacent carriage or toggling a light
    switch in the current carriage. “The only thing I am certain of
    is that $n$ is at least
    $3$ and at most
    $5000$.”
Interaction
This is an interactive problem. Your submission will be run
    against an interactor, which reads the
    standard output of your submission and writes to the standard
    input of your submission. This interaction needs to follow a
    specific protocol:
The interactor first sends an integer $s$ ($s
    \in \{ 0,1\} $), the state of the light switch in
    Hercule’s initial carriage.
Your submission may then send at most $3n+500$ steps1 for
    Hercule to carry out, each by printing one line of the form
    “? $a$”, where $a$ is one of the following:


“left”, to move to the
        adjacent train carriage in the clockwise direction,


“right”, to move to the
        adjacent train carriage in the counter-clockwise direction,
        or


“flip”, to toggle the light
        switch in the current train carriage.


After every step, the interactor replies with an integer
    $s$ ($s \in \{ 0,1\} $), the state of the
    light switch in the train carriage that Hercule is currently
    in, after he has carried out the requested step.
When you have determined the number of train carriages
    $n$, print one line of the
    form “! $n$” ($3
    \leq n \leq 5000$), after which the interaction will
    stop. Printing the answer does not count as a query.
The interactor is not adaptive; the initial state of the
    light switches is determined by the interactor before any
    interaction takes place. Make sure you flush the buffer after
    each write. Using more than $3n+500$ queries will result in a
    wrong answer verdict.
A testing tool is provided to help you develop your
    solution.


Read
Sample
        Interaction 1
Write



0


? right


1


? right


1


? right


0


? flip


1


? left


1


? left


1


? left


1


! 3",5.4,Medium,1 second,1024 MB,,
Glyph Recognition,glyphrecognition,0.0,261,1568,518,2.7,Easy,https://open.kattis.com/problems/glyphrecognition,"You are an archaeologist working at an excavation site where
    your team has found hundreds of clay tablets containing glyphs
    written in some ancient language. Not much is known about the
    language yet, but you know that there are only six different
    glyphs, each of them in the shape of a regular polygon with one
    vertex pointing to the right (see Figure 1(a) below). Only
    the boundary of each polygon is carved out of the clay.







(a) The six
            glyphs.







(b) The first
            sample input.




 


(c) Fitting
            triangles and hexagons to the first
            sample. The triangles’ score is higher.



Figure 1: Glyph recognition
        


You want to start analysing the language right away, so you
    need to get the text on the tablets into some machine readable
    format. Ideally, you would like to use an OCR (optical
    character recognition) tool for that, but you do not have one
    installed on your laptop and there is no internet connection at
    the site.
Because of this you have devised your own scheme to digitise
    the ancient writings: for every glyph on a tablet you first
    find a number of sample points that are in the carved out
    region, i.e. on the boundary of the polygon. Based on
    those sample points you then calculate a score for each of the
    six glyphs and mark the one with the highest score as the
    recognised glyph.
For a given number of corners $k$ ($3
    \le k \le 8$), the score is computed as follows. Two
    regular $k$-gons are
    fitted to the sample points, one from the inside and one from
    the outside, such that the following hold:


Each polygon is centered at the origin, i.e. all
        vertices have equal distance to $(0,0)$.


Each polygon has a vertex on the positive $x$-axis.


The inner polygon is the largest such polygon containing
        none of the sample points.


The outer polygon is the smallest such polygon
        containing all of the sample points.


An example can be seen in Figure 1(c). The score for
    this value of $k$ is
    $\frac{A_\text {inner}}{A_\text
    {outer}}$, where $A_\text
    {inner}$ and $A_\text
    {outer}$ are the areas of the inner and outer polygon,
    respectively.
Given a set of sample points, find the glyph with the
    highest score.
Input
The input consists of:


One line with one integer $n$ ($1 \le n \le 1\, 000$), the number
        of sample points.


$n$ lines, each
        with two integers $x,y$ ($-10^6 \le x,y \le 10^6$),
        specifying a point at coordinates $(x,y)$.


No sample point is at the origin and all points are
    distinct.
Output
Output the optimal number of corners $k$ ($3
    \le k \le 8$), followed by the score obtained for that
    value of $k$. Your answer
    will be accepted if the absolute error does not exceed
    $10^{-6}$. If several
    values of $k$ result in a
    score that is within $10^{-6}$ of the optimal score, any
    one of them will be accepted.


Sample Input 1
Sample Output 1




9
-4 -1
-4 6
-3 -6
-3 4
0 -4
2 -3
2 3
5 1
7 0




3 0.5625000000






Sample Input 2
Sample Output 2




4
1 0
0 1
-1 0
0 -1




8 1.0000000000",2.7,Easy,2 seconds,1024 MB,,
God Save the i-th Queen,ith,0.07,433,957,336,5.8,Hard,https://open.kattis.com/problems/ith,"Did you know that during the ACM-ICPC World Finals a big
    chessboard is installed every year and is available for the
    participants to play against each other? In this problem, we
    will test your basic chess-playing abilities to verify that you
    would not make a fool of yourself if you advance to the World
    Finals. Let us centrate on queens. As you probably know, the
    queens may move not only horizontally and vertically, but also
    diagonally. You are given a chessboard with $i-1$ queens already placed and your
    task is to find all squares that may be used to place the
    $i$-th queen such that it
    cannot be captured by any of the others.
Input
The input consists of several tasks, at most $5$. Each task begins with a line
    containing three integer numbers separated by a space:
    $X, Y, N$. $X$ and $Y$ give the chessboard size,
    $1\leq X, Y \leq 20\,
    000$. $N = i-1$ is
    the number of queens already placed, $0\leq N\leq \min (X\cdot Y, 20\,
    000)$. After the first line, there are $N$ lines, each containing two numbers
    $x_ k, y_ k$ separated by
    a space. They give the position of the $k$-th queen, $1\leq x_ k \leq X, 1\leq y_ k\leq Y$.
    You may assume that those positions are distinct, i.e., no two
    queens share the same square. The last task is followed by a
    line containing three zeros.
Output
For each task, output one line containing a single integer
    number: the number of squares which are not occupied and do not
    lie on the same row, column, or diagonal as any of the existing
    queens.


Sample Input 1
Sample Output 1



8 8 2
4 5
5 5
0 0 0



20",5.8,Hard,8 seconds,1024 MB,,
Pascal Multiple,pascalmultiple,0.0,156,242,100,2.7,Easy,https://open.kattis.com/problems/pascalmultiple,"The $(i,j)$th binomial
    coefficient, denoted $C(i,j)$, is the (zero-indexed)
    $j$th entry of the
    (zero-indexed) $i$th row
    in Pascal’s triangle:

1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
...

where $C(0,0) = 1$ and
    the $(i+1)$st row can be
    computed from the $i$th
    row using the recursion\[
    C(i+1, j) = C(i,j) + C(i, j-1), \]
treating as $0$ any
    out-of-bounds entries of the triangle on the right-hand
    side.
Given $N$ and
    $K$, compute how many
    entries in the first $N+1$
    rows of Pascal’s triangle are multiples of $K$. To be precise: for how many pairs
    of indices $(i,j)$ with
    $0\leq i\leq N$ and
    $0 \leq j \leq i$, is
    $C(i,j)$ divisible by
    $K$?
Input
The single line of input contains two positive integers
    $N$ $(1 \leq N \leq 10^3)$ and
    $K$ $(1 \leq K \leq N)$, with meaning as
    described above.
Output
Print the number of entries in the first $N+1$ rows of Pascal’s triangle that
    are divisible by $K$.


Sample Input 1
Sample Output 1



5 3



3






Sample Input 2
Sample Output 2



1000 4



394315",2.7,Easy,1 second,1024 MB,,
Joint Excavation,jointexcavation,0.05,481,608,163,4.9,Medium,https://open.kattis.com/problems/jointexcavation,"Mole
        by Ahmad Kanbar, Unsplash
      
The mole family recently decided to dig a new tunnel
    network. The layout, which has already been decided, consists
    of chambers and bidirectional tunnels connecting them, forming
    a connected graph. Mother mole wants to use the opportunity to
    teach her two mole kids how to dig a tunnel network.
    As an initial quick demonstration, mother mole is going to
    start by digging out a few of the chambers and tunnels, in the
    form of a non-self-intersecting path in the planned tunnel
    network. She will then divide the remaining chambers between
    the two mole kids, making sure that each mole kid has to dig
    out the same number of chambers, or else one of the mole kids
    will become sad. (The tunnels are much easier to dig out, and
    thus of no concern.) The kids may work on their assigned
    chambers in any order they like.
Since the mole kids do not have much experience with digging
    tunnel networks, mother mole realises one issue with her plan:
    if there is a tunnel between a pair of chambers that are
    assigned to different mole kids, there is a risk of an accident
    during the excavation of that tunnel if the other mole kid
    happens to be digging in the connecting chamber at the same
    time.
Help mother mole decide which path to use for her initial
    demonstration, and how to divide the remaining chambers evenly,
    so that no tunnel connects a pair of chambers assigned to
    different mole kids. The initial path must consist of at least
    one chamber and must not visit a chamber more than once.
Input
The input consists of:


One line with two integers $c$ and $t$ ($1 \leq c \leq 2 \cdot 10^5$,
        $0 \leq t \leq 2 \cdot
        10^5$), the number of chambers and tunnels in the
        planned tunnel network.


$t$ lines, each
        containing two integers $a$ and $b$ ($1 \leq a,b \leq c$, $a \neq b$), describing a
        bidirectional tunnel between chambers $a$ and $b$.


The chambers are numbered from $1$ to $c$. There is at most one tunnel
    between any pair of chambers, and there exists a path in the
    network between any pair of chambers.
Output
First output two integers $p$ and $s$, the number of chambers on the
    path in mother mole’s initial demonstration and the number of
    chambers each mole kid has to dig out. Then output a line
    containing the $p$
    chambers in mother mole’s initial path, in the order that she
    digs them out. Then output two more lines, each containing the
    $s$ chambers that the
    respective mole kid has to dig out, in any order.
The input is chosen such that there exists at least one
    valid solution. If there are multiple valid solutions, you may
    output any one of them.


Sample Input 1
Sample Output 1



3 2
3 1
2 1



3 0
3 1 2






Sample Input 2
Sample Output 2



4 3
1 3
2 3
3 4



2 1
3 4
2
1






Sample Input 3
Sample Output 3



7 7
1 2
2 3
4 2
2 5
4 5
6 7
7 2



3 2
5 2 7
6 1
3 4",4.9,Medium,4 seconds,1024 MB,,
Farey Sequence Length,farey,0.0,215,1587,780,3.3,Medium,https://open.kattis.com/problems/farey,"Given a positive integer, $N$, the sequence of all fractions
    $a / b$ with $0 \le a \le b$, $1 \le b \le N$ and $a$ and $b$ relatively prime, listed in
    increasing order, is called the Farey
    Sequence of order $N$.
    For example, the Farey Sequence of order
    $6$ is:\[ 0/1, 1/6, 1/5, 1/4, 1/3, 2/5, 1/2, 3/5,
    2/3, 3/4, 4/5, 5/6, 1/1 \]
For this problem, you will write a program to compute the
    length of the Farey Sequence of order
    $N$.
Input
The first line of input contains a single integer
    $P$ ($1 \le P \le 10\, 000$), which is the
    number of data sets that follow. Each data set should be
    processed identically and independently.
Each data set consists of a single line of input. It
    contains the data set number, $K$, followed by the order
    $N$ ($2 \le N \le 10\, 000$) of the
    Farey Sequence whose length is to be
    found.
Output
For each data set there is a single line of output. The
    single output line consists of the data set number,
    $K$, followed by a single
    space followed by the length of the Farey
    Sequence as a decimal integer.


Sample Input 1
Sample Output 1



4
1 6
2 15
3 57
4 9999



1 13
2 73
3 1001
4 30393487",3.3,Medium,1 second,1024 MB,,
Rhombinoes,rhombinoes,0.0,1098,123,40,6.7,Hard,https://open.kattis.com/problems/rhombinoes,"In the game of Rhombinoes, you have a board made up
    entirely of equilateral trianges (see the image), some of which
    are “live” and some are “dead”. Your goal is
    to place down as many rhombinoes (“rhombus”-shaped pieces) as
    possible on the board. Each rhombino should exactly cover two
    “adjacent” live triangles that have a common side, and
    no two rhombinoes can use the same triangle.
Given the description of the live and dead
    triangles of a Rhombino board, what is the maximum number of
    rhombinoes you can simultaneously place down on the board?
Each triangle in the board has a pair of coordinates
    $(x, y)$. The bottom-left
    triangle has coordinates $(0,
    0)$ and will always be a triangle with its tip pointed
    upward. For any given triangle with coordinates $(x, y)$, the triangle adjacent to it
    on its right-side (if any) has coordinates $(x+1, y)$, and the triangle adjacent
    to it on its top-side (if any) has coordinates $(x, y+1)$. Left-side and bottom-side
    adjacency are defined similarly.
Each board has a width $W$ and a height $H$. A board with width $W$ and height $H$ is the board which consists of all
    triangles with coordinates $(x,
    y)$ such that $0 \leq x
    < W$ and $0 \leq y <
    H$. For example, the game board in the image has width
    $6$ and height
    $3$.
(See Figure 1 for clarification.)




Figure 1: Sample input, with cells $(1,1)$, $(2,2)$, $(4,1)$, and $(3,0)$ dead.
        


Input
The first line of input contains three space-separated
    integers $W$, $H$, and $K$.
$W$ is the width of the
    board, $H$ is the height,
    and $K$ is the number of
    dead triangles on the board ($1
    \leq W \leq 100$, $1 \leq
    H \leq 100$, $1 \leq K
    \leq W\cdot H \leq 1000$).
Exactly $K$ lines will
    follow. Each such line will contain a pair of space-separated
    integers $x$ and
    $y$ ($0 \leq x < W$, $0 \leq y < H$), indicating that
    the triangle with coordinates $(x,y)$ is a dead triangle.
    All other triangles are live.
Output
Output a line containing a single integer, the maximum
    number of rhombinoes you can simultaneously place down on the
    board.


Sample Input 1
Sample Output 1




6 3 4
1 1
2 2
4 1
3 0




5",6.7,Hard,1 second,1024 MB,,
Infinite Slides,infiniteslides,0.0,199,255,132,3.4,Medium,https://open.kattis.com/problems/infiniteslides,"Agneta and Beata are visiting the famous Swedish Amusement
    Park of Infinite Fun and Games. Their favourite attraction is
    the Infinitely Long Slides. Each slide can be viewed as an
    infinitely long, completely vertical spiral of radius
    $1$.
When projected into the (flat) ground, the first slide has
    $(0, 0)$ as its centre
    point, and the second one has $(1, 0)$ as its centre point.
    Furthermore, the start of the slides are at $(1, 0)$ and $(2, 0)$ respectively, and then
    proceeds counter-clockwise around their respective centres.
    When Agneta rides her slide (the first one), she does so with
    vertical speed $1\text {
    m/s}$, while Beatas slide has a bit higher gradient, so
    she goes with vertical speed $2\text { m/s}$. However, their
    angular speeds around the centre is both equal to $1 \text { rad/s}$. Since Beata is a
    little afraid of the slides, she always waits for Agneta to go
    first. $W$ seconds after
    Agneta went, Beata starts her descent.
To make the infinite ride a bit more fun, the amusement park
    gives a prize if the two riders on the slides manage to pass a
    ball between them at some point. This prize consists of a lot
    of chocolate, which is Beata’s favourite treat. To maximize
    their chances of passing the ball successfully, they want to
    wait until their Euclidean distance is the smallest possible
    during the ride. How small will this distance be?
Input
The first and only line of the input contains the decimal
    number $0 \le W \le 1000$.
    The number contains at most $6$ digits after the decimal
    point.
Output
Output a single number – the minimal Euclidean distance
    between Agneta and Beata during their trip. Your answer will be
    accepted if it is within a relative or absolute error of
    $10^{-4}$ of the judges’
    answer.


Sample Input 1
Sample Output 1



0



1






Sample Input 2
Sample Output 2



6.283185



1






Sample Input 3
Sample Output 3



42



1.5228490019






Sample Input 4
Sample Output 4



1.047198



2",3.4,Medium,3 seconds,1024 MB,,
"Tide Goes In, Tide Goes Out",tide,0.01,972,174,73,4.5,Medium,https://open.kattis.com/problems/tide,"You are kayaking through a system of underground caves and
    suddenly realize that the tide is coming in and you are
    trapped! Luckily, you have a map of the cave system. You are
    stuck until the tide starts going out, so you will be here for
    a while. In the meantime, you want to determine the fastest way
    to the exit once the tide starts going out.
The cave system is an $N$ by $M$ grid. Your map consists of two
    $N$ by $M$ grids of numbers: one that
    specifies the height of the ceiling in each grid square, and
    one that specifies the height of the floor in each grid square.
    The floor of the cave system is porous, which means that as the
    water level falls, no water will remain above the water
    level.
You are trapped at the north-west corner of the map. The
    current water level is $H$
    centimeters, and once it starts going down, it will drop at a
    constant rate of 10 centimeters per second, down to zero. The
    exit is at the south-east corner of the map. It is now covered
    by water, but it will become passable as soon as the water
    starts going down.
At any time, you can move north, south, east or west to an
    adjacent square with the following constraints:


The water level, the floor height of your current
        square, and the floor height of the adjacent square must
        all be at least 50 centimeters lower than the ceiling
        height of the adjacent square. Note: this means that you
        will never be able to enter a square with less than 50
        centimeters between the floor and the ceiling.


The floor height of the adjacent square must be at least
        50 centimeters below the ceiling height of your current
        square as well.


You can never move off the edge of the map.


Note that you can go up or down as much as you want with
    your kayak. (You’re very athletic from all this kayaking!) For
    example, you can go from a square with floor at height 10
    centimeters to an adjacent square with floor at height 9000
    centimeters (assuming the constraints given above are met).
These constraints are illustrated below:





In the first image, you can’t move to the right because
        the water level is less than 50 centimeters below the
        ceiling height of the adjacent square.


In the second image, you can’t move to the right because
        the floor height of your current square is less than 50
        centimeters below the ceiling height of the adjacent
        square.


In the third image, you can’t move to the right because
        the floor height of the adjacent square is less than 50
        centimeters below the ceiling height of the adjacent
        square. You’ll never be able to enter that square from any
        direction.


In the fourth image, you can’t move to the right because
        the floor height of the adjacent square is less than 50
        centimeters below the ceiling height of the current
        square.


When moving from one square to another, if there are at
    least 20 centimeters of water remaining on the current square
    when you start moving from it, it takes 1 second to complete
    the move (you can use your kayak). Otherwise, it takes 10
    seconds (you have to drag your kayak). Note that the time
    depends only on the water level in the square you are leaving,
    not in the square you are entering.
It will be a while before the tide starts going out, and so
    you can spend as much time moving as you want before the water
    starts going down. What matters is how much time you will need
    from the moment the water starts going down until the moment
    you reach the exit. Can you calculate this time?
Input


The first line will contain a single integer, T: the
        number of test cases


It is followed by T test cases, each starting with a
        line containing integers H, N and M, representing the
        initial water level height, in centimeters, and the map
        dimensions. The following 2N lines contain the ceiling and
        floor heights as follows:


The next N lines contain M space-separated integers
            each. The jth integer in the ith row represents Cij,
            the height of the ceiling in centimeters at grid
            location (j, i), where increasing i coordinates go
            South, and increasing j coordinates go East.


The next N lines contain M space-separated integers
            representing the heights of the floor, in the same
            format.




At the starting location, there will always be at least
        50 cm of air between the ceiling and the starting water
        level, and at least 50 cm between the ceiling and the
        floor.


The exit location will always have at least 50 cm of air
        between the ceiling and the floor.


There will always be a way out (you got in, after
        all!).


Output
For each test case, output one line containing Case #x:
    t, where $x$ is the
    case number (starting from 1), and $t$ is the time, in seconds, starting
    from when the tide begins going out, that it takes you to make
    your way out of the cave system. Answers within an absolute or
    relative error of $10^{-6}$ of the correct answer will
    be accepted.
Notes
It is possible that you can go through the whole cave system
    before the tide starts dropping. In this case you will be able
    to wait at the exit for the tide to start dropping, so the
    answer in this case should be zero (this is the case in the
    fourth of the sample test cases).
In the first sample test case, there are initially only 33
    centimeters between the water level and the ceiling of the
    eastern square, so after the tide starts going down, you have
    to wait for at 1.7 seconds to enter it. Once it is accessible,
    you can start going in - but the water level in the western
    square is now so low (only 3 centimeters above the floor) that
    you have to drag your kayak for the next 10 seconds to get to
    the exit point.
The initial situation in the second case is better - you
    have a lot of headroom in adjacent squares, so you can move,
    for example, to (1, 1) before the tide starts dropping. Once
    there, you have to wait for the tide to start going down, and
    the water level to go down to 90cm (that takes one second).
    Then you can kayak south and then east and get out (in a total
    of three seconds). Note that you cannot go through the cave at
    (2, 1), even though the ceiling there is high enough, because
    there is too little space between the floor of this cave and
    the ceiling of any caves you could try to enter from ((1, 1)
    and (2, 0)) - only 10 centimeters in each case.
The third case is somewhat similar to the first - you have
    to wait at the starting position until the tide goes down to
    50cm. After that you can kayak for the exit - but after three
    moves (taking three seconds) the water is at 20cm, which is
    only 10cm above the floor, which means the fourth move will be
    dragging instead of kayaking.
In the fourth case you are really lucky! You can immediately
    go the exit, even before the tide starts leaving, and wait
    there.
Limits
$1 \leq T \leq 50$.
    $1 \leq N, M \leq 100$.
    $1 \leq H \leq 10000$.
    $1 \leq F_{xy} \leq C_{xy} \leq
    10000$.


Sample Input 1
Sample Output 1




4
200 1 2
250 233
180 100
100 3 3
500 500 500
500 500 600
500 140 1000
10 10 10
10 10 490
10 10 10
100 3 3
500 100 500
100 100 500
500 500 500
10 10 10
10 10 10
10 10 10
100 2 2
1000 1000
1000 1000
100 900
900 100




Case #1: 11.7
Case #2: 3.0
Case #3: 18.0
Case #4: 0.0",4.5,Medium,5 seconds,1024 MB,,
Exam,exam,0.0,5,5697,2934,2.0,Easy,https://open.kattis.com/problems/exam,"Your friend and you took the same true/false exam. You know
    your answers, your friend’s answers, and the number of your
    friend’s answers that were correct.
Compute the maximum possible score you could have
    gotten.
Input
The first line contains a single integer $k$, the number of correct answers on
    your friend’s exam.
The second line contains a string of characters, the answers
    you wrote down. Each letter is either a ‘T’
    or an ‘F’. The length of the string is the
    number $n$ of exam
    questions.
The third line also contains a string of $n$ characters, the answers your
    friend wrote down. Each letter is either a ‘T’ or an ‘F’.
Bounds are $0 \leq k \leq n
    \leq 1\, 000; 1 \leq n$.
Output
The output is one line containing the maximum number of
    questions you could have gotten correct.


Sample Input 1
Sample Output 1



3
FTFFF
TFTTT



2






Sample Input 2
Sample Output 2



6
TTFTFFTFTF
TTTTFFTTTT



9",2.0,Easy,1 second,1024 MB,,
Rectilinear Polygon,rectilinear,0.01,603,168,65,7.2,Hard,https://open.kattis.com/problems/rectilinear,"Given is $n$ points
    with integer coordinates in the plane. Is it is possible to
    construct a simple, that is non-intersecting, rectilinear
    polygon with the given points as vertices? In a rectilinear
    polygon there are at least 4 vertices and every edge is either
    horizontal or vertical; each vertex is an endpoint of exactly
    one horizontal edge and one vertical edge. There are no holes
    in a polygon.





Figure 1: Example from the sample input
      

Input
The first line of input is an integer giving the number of
    cases that follow. The input of each case starts with an
    integer $4\leq n\leq 100\,
    000$ giving the number of points for this test case. It
    is followed by $n$ pairs
    of integers specifying the $x$ and $y$ coordinates of the points for this
    case.
Output
The output should contain one line for each case on input.
    Each line should contain one integer number giving the length
    of the rectilinear polygon passing through the given points
    when it exists; otherwise, it should contain $-1$.


Sample Input 1
Sample Output 1




1
8
1 2
1 0
2 1
2 2
3 2
3 1
4 0
4 2




12",7.2,Hard,1 second,1024 MB,,
Ice Floe Jumping,icefloes,0.02,2867,724,76,8.8,Hard,https://open.kattis.com/problems/icefloes,"Photo by rubyblossom


Two polar bears (of opposite genders) were floating around
    on ice floes (“isflak” in Swedish, “ľadová kryha” in Slovak)
    somewhere outside the northern parts of Greenland, and had
    finally decided to meet. After only a couple of minutes, and a
    few jumps between ice floes, the small ice floe one of the
    bears jumped to sank into the freezing water, along with the
    bear standing on it. Luckily, the bear survived, and eventually
    the two bears made a couple and got many small and cute polar
    bear cubs.
Unlike polar bears, human scientists would probably not
    survive falling into the arctic waters, and they would have to
    compensate the lack of bear fur using intelligently written
    software to run on their PDAs, which can help them avoid
    stepping on smaller (and therefore more dangerous) ice floes
    than necessary. The scientists already have software and
    hardware to download high resolution up-to-date satellite
    photos of the area they will be in, and to transform the
    downloaded pictures into two dimensional polygons describing
    the shapes of the ice floes. You have been asked to write the
    software that given these descriptions, and the positions of
    the scientists, calculates the area of the smallest ice floe
    any of the scientists need to pass, including the ice floes the
    scientists are already standing on, so that they can meet.
The scientists can only jump between two ice floes if they
    are closer to each other than some distance $d$. Actually, it is possible to jump
    between two floes if there exists one pair of points, one on
    each ice floe, on the surfaces or borders of the floes, that
    are not farther away from each other than the distance
    $d$.
Even though the ice floes are floating around in the water,
    the relative positions of the ice floes can be considered
    constant during the time it takes for the scientists to meet.
    The ice floes are guaranteed to neither touch nor overlap each
    other.
Input
The input starts with the number of test cases $N$ on a line by itself. For each test
    case the following information then follows: One line with the
    number of ice floes $(1 \leq f
    \leq 100)$ and the maximum distance $(0 < d \leq 1\, 000)$ that the
    scientists are able to jump. $d$ is a floating point number with
    maximum 4 decimals. After that, one line with the coordinates
    of the two scientists. The coordinates are given on the form
    $(x\; y)$. Then follow
    $f$ lines with ice floe
    descriptions. An ice floe is described as a polygon. Every floe
    line consists of the number of vertices $(3 \leq v \leq 100)$ followed by
    $v$ coordinates, also on
    the form $(x\; y)$. The
    coordinates might be given in clockwise or counterclockwise
    order.
All coordinates in this problem are integers with absolute
    value at most $20\,
    000$.
Output
For each test case, output the surface area of the smallest
    ice floe any of the scientists need to pass in order for them
    to meet, provided that they have chosen the safest possible
    route. If no possible route exists, output “Scientists cannot
    meet”. The output for each test case should be on a line by
    itself.
The output is considered correct if it is within relative or
    absolute error $10^{-7}$.




Figure 1: Illustration of the sample input
        




Sample Input 1
Sample Output 1




1
7 1
(2 2) (12 13)
6 (6 2) (8 4) (8 6) (7 7) (4 7) (4 5)
6 (8 7) (10 6) (13 9) (11 11) (10 10) (8 10)
6 (12 5) (24 5) (23 14) (17 13) (13 11) (14 8)
3 (10 12) (11 15) (14 12)
4 (4 10) (7 9) (10 13) (4 14)
3 (4 9) (5 8) (3 7)
5 (0 4) (3 3) (5 2) (6 0) (0 0)




6.0",8.8,Hard,2 seconds,1024 MB,,
Reduplication,reduplikation,0.0,5,10047,6141,1.1,Easy,https://open.kattis.com/problems/reduplikation,"Reduplication is when one repeats a word several times,
    often to reinforce or alter its meaning. In some languages,
    such as Indonesian, reduplication is very common and serves
    various grammatical functions. Even in Swedish, reduplication
    is used occasionally, for example, saying ""hej hej"" instead of just ""hej"".
Rama is a diligent user of reduplication when chatting with
    his friends. He sometimes writes the same word up to nine
    times, which takes a long time. Therefore, he usually writes
    the word once, followed by a number indicating how many times
    the word should be repeated.
Write a program that reads in a word Rama intends to repeat
    and how many times it should be repeated. The program should
    then print the word repeated the correct number of times.
Input
The first line of the input contains a string $s$ ($2
    \leq |s| \leq 10$), the word Rama wants to write. The
    word consists of letters from a-z.
The next line contains a digit between $1$ and $9$, the number of times Rama wants to
    write the word.
Output
Print $s$ as many times
    as the digit indicates.
Points
Your solution will be tested on several test case groups. To
    get the points for a group, it must pass all the test cases in
    the group.



Group


Point value


Constraints




$1$


$20$


The digit is $1$.




$2$


$80$


No additional constraints.





Sample Input 1
Sample Output 1



hej
3



hejhejhej






Sample Input 2
Sample Output 2



ha
4



hahahaha",1.1,Easy,1 second,1024 MB,,
Doors,doors,0.01,749,630,127,6.0,Hard,https://open.kattis.com/problems/doors,"Alex is a circle of radius $R$. Well, life as a circle is not
    easy. If he were a point, moving around and passing through
    doors would be effortless. But now he has to carefully inspect
    the surroundings before making every move.





Alex’s is initially at position $(0, y_\infty )$, where $y_\infty $ is much bigger than the
    width of the corridor $w$.
    Alex wants to meet Bob, who happens to be living to the far
    right of the corridor (may as well be somewhere at $(x_\infty , w/2)$, where $x_\infty $ is much bigger than
    $\ell $). The lengths of
    the two doors are $\ell $.
    It is guaranteed that $\ell \leq
    w$, so that door B will never hit the opposite side of
    the wall.
You are given $T$
    scenarios. In each scenario, the angles $A$ and $B$ are given (both are radians in the
    range $[0, \pi ]$). Find
    the largest $r \leq R$
    such that when Alex’s radius is shrunk to $r$, he can reach Bob while avoiding
    the obstacles (walls and doors).
Formally, Alex when shrunk to radius $r$ can reach Bob if and only if there
    exists a (continuous) curve from $(0, y_\infty )$ to $(x_\infty , w/2)$ such that the
    minimal distance between a point on the curve and a point on an
    obstacle (a wall or a door) is at least $r$. In particular, if $r = 0$ then Alex will be able to
    reach Bob.
Input
The first line of input consists of three integers,
    $R$, $\ell $, and $w$ ($1
    \leq \ell , w, R \leq 100$ and $\ell \leq w$). The second line of
    input consists of an integer $T$ ($1
    \leq T \leq 10\, 000$), the number of scenarios to
    follow. Each of the next $T$ lines consists of a pair of real
    numbers, representing angles $A$ and $B$ (in radians). The numbers are
    given with exactly $4$
    decimal places.
Output
For each scenario, output the required answer on a separate
    line. Your answer will be accepted if its absolute or relative
    error (compared to the judge’s answer) is at most $10^{-5}$.


Sample Input 1
Sample Output 1




10 6 8
4
0.0000 0.0000
3.1415 0.0000
1.0472 0.0000
1.0472 1.5708




0.000000000
3.000000000
2.598079885
1.000000000",6.0,Hard,1 second,1024 MB,,
Skyline,skyline,0.0,1256,265,122,5.1,Medium,https://open.kattis.com/problems/skyline,"Last time I visited Shanghai I admired its beautiful
    skyline. It also got me thinking, ""Hmm, how much of the
    buildings do I actually see?"" since the buildings wholly or
    partially cover each other when viewed from a distance.

    In this problem, we assume that all buildings have a
    trapezoid shape when viewed from a distance. That is, vertical
    walls but a roof that may slope. Given the coordinates of the
    buildings, calculate how large part of each building that is
    visible to you (i.e. not covered by other buildings).
Input
The first line contains an integer, $N$ ($2
    \le N \le 100$), the number of buildings in the city.
    Then follow $N$ lines each
    describing a building. Each such line contains $4$ integers, $x_1$, $y_1$, $x_2$, and $y_2$ ($0 \le x_1 < x_2 \le 10 000, 0 \le y_1,
    y_2 \le 10 000$). The buildings are given in distance
    order, the first building being the one closest to you, and so
    on.
Output
For each building, output a line containing a floating point
    number between $0$ and
    $1$, the relative visible
    part of the building. The absolute error for each building must
    be within $10^{-6}$.




Figure 1: Figure of the first sample case
        




Sample Input 1
Sample Output 1




4
2 3 7 5
4 6 9 2
11 4 15 4
13 2 20 2




1.00000000
0.38083333
1.00000000
0.71428571






Sample Input 2
Sample Output 2




5
200 1200 400 700
1200 1400 1700 900
5000 300 7000 900
8200 400 8900 1300
0 1000 10000 800




1.00000000
1.00000000
1.00000000
1.00000000
0.73667852",5.1,Medium,1 second,1024 MB,,
Bridge building,bridgebuilding,0.29,6978,253,164,8.7,Hard,https://open.kattis.com/problems/bridgebuilding,"In ancient days, long before even LTH existed, there were
    $M$ pairs of lovers living
    along the Söderåsen ridge. Each of the $2M$ people lived at some integer
    distance in meters from the start of the ridge, and
    unfortunately, not in the same place as their partner.
The shape of the ridge could be modeled as a list of
    positive integers $H$, the
    $i$th of which represents
    the height above sea level $i$ meters away from the start of the
    ridge. Walking one meter along the ridge would take the
    inhabitants as many minutes as the difference in height plus
    one (so moving from position $i$ to $i + 1$ would take $|H_ i - H_{i+1}| + 1$ minutes).
The people living along Söderåsen eventually grew tired of
    walking for days on end in order to meet their loved ones, and
    so decided to build one bridge connecting two positions along
    the ridge. A bridge could have been built between indices
    $i$ and $j$ if $j > i$, $H_ i = H_ j$ and $H_ k < H_ i$ for every integer
    $k$ strictly between
    $i$ and $j$. Such a bridge would allow people
    to walk from position $i$
    to $j$ in $|j - i|$ minutes.
Unfortunately, the ancient Scanians did not have access to
    computers or courses in algorithm design, and so the bridge
    that was built may not have been the best one possible. The
    best bridge is one that makes the sum of the time it takes each
    pair to reach each other as small as possible. If the best
    possible bridge had been built, what would this sum have
    been?
Input
The first line of input contains two integers $N$ and $M$, where $2 \leq N \leq 200\, 000$ and
    $1 \leq M \leq 200\, 000$,
    the length of the ridge in meters and the number of pairs
    living along the ridge respectively.
The second line contains $N$ integers $H_1 \dots H_ N$, where $0 \leq H_ i \leq 10^6$, representing
    the height of the ridge.
Each of the next $M$
    lines contain two integers $a_
    i$ and $b_ i$,
    where $a_ i, b_ i \in \{ 1,
    \ldots , N \} , a_ i \neq b_ i$, the position along the
    ridge where the first and second person in pair $i$ lived.
It is guaranteed that there is at least one pair of
    positions between which a bridge can be built.
Output
Output a single integer, the smallest possible sum of
    distances between the pairs if an optimal bridge is built.
Scoring
Your solution will be tested on a set of test case groups.
    To get the points for a group, you need to pass all the test
    cases in the group.



Group


Points


Constraints




$1$


$10$


$2 \leq N \leq 100, 1
          \leq M \leq 100$




$2$


$12$


$2 \leq N \leq 5000, 1
          \leq M \leq 5000$




$3$


$13$


$2 \leq N \leq 200\,
          000, 1 \leq M \leq 100$




$4$


$21$


$2 \leq N \leq 200\,
          000, 1 \leq M \leq 200\, 000, H_ i \in \{ 0, 1 \}
          $ for all $i$




$5$


$11$


$2 \leq N \leq 200\,
          000, 1 \leq M \leq 200\, 000, H_ i \in \{ 0, \ldots , 50
          \} $ for all $i$




$6$


$33$


$2 \leq N \leq 200\,
          000, 1 \leq M \leq 200\, 000$



Sample Description
In sample input 1, there is only one possible bridge,
    between the two positions with height $4$. Building this bridge reduces the
    distance between the two people from $10$ to $7$.



Figure 1: Visualization of sample input 1 with the
        optimal bridge shown in red.
      




Figure 2: Visualization of sample input 2 with the
        optimal bridge shown in red.
      



Sample Input 1
Sample Output 1



5 1
3 4 1 3 4
1 4



7






Sample Input 2
Sample Output 2



13 4
4 5 4 3 1 4 3 1 4 5 4 4 5
8 6
4 9
1 10
11 13



32",8.7,Hard,3 seconds,1024 MB,,
XORsistinn 2,xorsist2,0.0,163,149,96,3.9,Medium,https://open.kattis.com/problems/xorsist2,"Gunnar the priest received a mysterious message by post
    yesterday that said that one of his parishioners might be
    possessed. On the back it said ,,You are our only hope
    XORsist!"". Gunnar was in fact a sorcerer and had great
    experience in repelling spirits and demons.
He decided to write down the names of everyone at his sermon
    and ended up with names numbered from $1$ to $N$. Later he realized that he took
    the XOR of all the numbers from $a$ to $b$ that would give him information on
    who’s possessed; if the number is $0$ no one is possessed and if it’s
    between $1$ and
    $N$ then it would be the
    person on the list corresponding to that number. If it’s larger
    than $N$ it must be Gunnar
    himself that’s possessed and then we’re all in trouble!
Explanation of XOR
XOR, usually denoted by $~
    \hat{}~ $ in programming languages, is an operation that
    takes two numbers and returns a new number. The operation is
    performed on the two numbers in binary , bit by bit. The
    following table shows how a new bit is calculated from the
    corresponding bits in the input numbers.




A


B


A XOR B




1


1


0




1


0


1




0


1


1




0


0


0




Let us take an example. The number $1337$ in binary is 10100111001 and
    the number $1993$ in
    binary is 11111001001.




1337


1


0


1


0


0


1


1


1


0


0


1




1993


1


1


1


1


1


0


0


1


0


0


1




1337 XOR 1993


0


1


0


1


1


1


1


0


0


0


0




The result is 01011110000 which is the number $752$.
Input
The first line contains an integer $N$, the number of parishioners at
    Gunnar’s sermon. The next line contains two integers,
    $a$ and $b$, $1
    \leq a \leq b \leq N$.
Output
Print the number of the parishioner that’s possessed,
    Enginn if the value is $0$ and Gunnar if the value is greater than
    $N$.
Explanation of Sample Inputs
In the first sample $N =
    3$, $a = 1$,
    $b = 3$. If we calculate
    the XOR of all values from $1$ to $3$ we get $(1\textrm{ XOR }2)\textrm{ XOR }3 =
    0$. Thus no one is possessed so the answer is Enginn.
In the second input $N =
    7$, $a = 1$,
    $b = 4$. If we calculate
    the XOR of all numbers from $1$ to $4$ the result is $4$. Thus the fourth person on the
    list is possessed, so the answer is 4.
In the third sample $N =
    6$, $a = 3$,
    $b = 4$. If we calculate
    the XOR of all numbers from $3$ to $4$ the result is $7$. Gunnar is thus possessed and the
    answer is Gunnar.
Scoring
The solution will be tested on input data of varying
    difficulty and the data is divided into groups as shown in the
    table below. The solution will then be scored according to how
    many groups are solved.



Group


Points


Constraints




1


33


$ 1 \le N \le
          1000$




2


33


$ 1 \le N \le
          10^{18}$, $a =
          1$




3


34


$ 1 \le N \le
          10^{18}$





Sample Input 1
Sample Output 1



5
1 3



Enginn






Sample Input 2
Sample Output 2



7
1 4



4






Sample Input 3
Sample Output 3



6
3 4



Gunnar",3.9,Medium,1 second,1024 MB,,
Hacking the Screen,screen,0.0,420,265,133,3.7,Medium,https://open.kattis.com/problems/screen,"The ZOO management had been wondering for a long time how to
    increase the number of children visitors to the ZOO. The
    solution was surprising and unexpected in many ways. They
    installed a huge screen past the entrance and started to
    display short quizzes on it. The child in the crowd who first
    shouts out the answer to the quiz question is granted one day
    free access to the ZOO. The screen became soon very popular and
    various types of quizzes are routinely shown there. One type of
    the quiz is the math quiz containing arithmetic operations on
    integers. The management worries that older siblings and
    friends of the children might develop a math quiz screen
    hacking strategy: Snap the screen with the phone, run the image
    recognition SW which extracts formulas from the image,
    evaluates them, and presents the solution to the phone holder
    who immediately shouts out the answer.
Your task is to assess the difficulty of producing the
    screen hacking software. To get a better feel of the problem
    you will first develop a simple toy model application. Your
    code will read the formula presented in the preprocessed form
    of ASCII art and evaluate it.
Input
First line of each test case contains two integers
    $R$ and $C$ ($1
    \leq R \leq 3$, $1 \leq C
    \leq 1\, 000$). Each of the following $R$ lines contains $C$ characters. The whole matrix of
    $R \times C$ characters
    represents a single arithmetic formula written in ASCII art and
    generated by the following set of rules:

FORMULA -> COMPLEX | FORMULA + COMPLEX | FORMULA - COMPLEX

COMPLEX -> SQRT | FRACTION | TERM
          ______
SQRT -> \/SIMPLE

            SIMPLE
FRACTION -> ======
            SIMPLE

SIMPLE -> TERM | SIMPLE + TERM | SIMPLE - TERM

TERM -> INTEGER | INTEGER * TERM

INTEGER -> 0 | 1 | 2 | 3 | ... | 999999 | 1000000

There are also a few additional specifications regarding the
    layout of the formula.


The horizontal bar of each SQRT is made of one or more underscore
        symbols (‘_’, ascii decimal code
        $95$) and it always
        occupies the uppermost line of the formula in the
        screen.


When the formula occupies exactly two lines, then the
        first line contains only horizontal bars of all SQRT parts of the formula.


When the formula occupies exactly three lines, then all
        TERMs and all arithmetic
        operation symbols which are not part of any FRACTION or
        SQRT occupy the second line of the formula in the
        screen.


The length of the horizontal bar of SQRT is the same as the length of
        SIMPLE under the bar.


The fraction bar in FRACTION
        consists of one or more equality signs, its length is equal
        to the maximum of the lengths of SIMPLE above the bar and SIMPLE below the bar.


There is always exactly one space preceding and
        following each arithmetic operation symbol (+, -, *) on a particular line.


The formula exactly fits in to the $R \times C$ matrix, there are no
        blank/empty columns in front of the whole formula or behind
        it.


The whole formula is evaluated according to the standard
    arithmetic rules. Namely: Each FORMULA and each TERM
    is evaluated from left to right. Each SIMPLE is also evaluated from left to right
    with the additional standard condition that the multiplication
    has higher priority than the addition/subtraction. Evaluation
    of SQRT and FRACTION is also standard. The value of any
    evaluated FORMULA, COMPLEX, SQRT,
    FRACTION, SIMPLE and TERM is an
    integer whose absolute value does not exceed $1\, 000\, 000$.
Output
For each test case print a separate line with the value
    $V$ of the input
    formula.


Sample Input 1
Sample Output 1




1 13
1 + 2 * 3 - 4




3






Sample Input 2
Sample Output 2




2 16
  _________     
\/3 * 4 - 3 + 10




13






Sample Input 3
Sample Output 3




3 5
6 * 4
=====
 12  




2






Sample Input 4
Sample Output 4




3 13
    22     __
3 - == - \/16
    11       




-3",3.7,Medium,1 second,1024 MB,,
Harvard,harvard,0.02,1753,466,98,8.8,Hard,https://open.kattis.com/problems/harvard,"Picture from Wikimedia Commons
      
The term “Harvard architecture” applies to a computer
    that has physically separate memories for instructions and
    data. The term originated with the Harvard Mark I computer,
    delivered by IBM in 1944, which used paper tape for
    instructions and relays for data.

    Some modern microcontrollers use the Harvard architecture –
    but not paper tape and relays! Data memory is organized in
    banks, each containing the same number of data items. Each
    data-referencing instruction has a byte offset $f$ to a bank, and a bit $a$ that is used to select the bank to
    be referenced. If $a$ is
    $0$, then bank
    $0$ is referenced. If
    $a$ is $1$, then the value in a bank
    select register (BSR) identifies the bank to be used.
    Assume each instruction takes the same time to execute, and
    there is an instruction that can set the BSR’s value.
For example, suppose there are $4$ banks of $8$ bytes each. To access location
    $5$, either use a single
    instruction with $a = 0$
    and $f = 5$, or set the
    BSR to $0$ in one
    instruction and then use an instruction with $a = 1$ and $f = 5$. The first approach is faster
    since it does not require setting the BSR.
Now suppose (with the same memory) the location to access is
    $20$. Only one approach
    will work here: execute an instruction that sets the BSR to
    $2$ (unless the BSR
    already has the value $2$)
    and then use an instruction with $a = 1$ and $f = 4$.
A program is a sequence of operations. Each
    operation is either


a variable reference, written as V$i$,
        where $i$ is a
        positive integer, or


a repetition, written as R$n$
        <program> E, where $n$ is a positive integer and
        <program> is an arbitrary
        program. This operation is equivalent to $n$ sequential occurrences of
        <program>.


Your problem is to determine the minimum running time of
    programs. In particular, given the number and size of the
    memory banks and a program to be executed, find the minimum
    number of instructions (which reference memory location and
    possibly set the BSR) that must be executed to run the program.
    To do this you must identify a mapping of variables to memory
    banks that yields the smallest execution time, and report that
    execution time – that is, the number of memory references and
    BSR register settings required. The BSR’s value is initially
    undefined, and changes only when an instruction explicitly sets
    its value.

Input
The input consists of a single test case. A test case
    consists of two lines. The first line contains two integers
    $b$ and $s$, where $1 \le b \le 13$ is the number of
    memory banks and $1 \le s \le
    13$ is the number of variables that can be stored in
    each memory bank. The second line contains a non-empty program
    with at most $1\, 000$
    space-separated elements (each R$n$,
    V$i$, and E counts as one element).
You may assume the following:


In a repetition R$n$, the number of
        repetitions satisfies $1 \le
        n \le 10^6$.


In a loop operation R$n$ <program> E, the
        loop body <program> is not
        empty.


In a variable reference V$i$,
        the variable index satisfies $1 \le i \le \min (b \cdot s,
        13)$.


The total number of variable references performed by an
        execution of the program is at most $10^{12}$.


Output
Display the minimum number of instructions that must be
    executed to complete the program.


Sample Input 1
Sample Output 1




1 2
V1 V2 V1 V1 V2




5






Sample Input 2
Sample Output 2




2 1
V1 V2 V1 V1 V2




6






Sample Input 3
Sample Output 3




1 2
R10 V1 V2 V1 E




30






Sample Input 4
Sample Output 4




4 1
V1 R2 V2 V4 R2 V1 E V3 E




17",8.8,Hard,6 seconds,1024 MB,,
DNA,dna,0.0,53,909,355,4.8,Medium,https://open.kattis.com/problems/dna,"Biologists have discovered a strange DNA molecule, best
    described as a sequence of $N$ characters from the set
    $\{ A, B\} $. An unlikely
    sequence of mutations has resulted in a DNA strand consisting
    only of $A$’s. Biologists
    found that very odd, so they began studying the mutations in
    greater detail.
They discovered two types of mutations. One type results in
    changing any single character of the sequence ($A \rightarrow B$ or $B \rightarrow A$). The second type
    changes a whole prefix of the sequence, specifically
    replacing all characters in positions from $1$ to $K$ (for some $K$ between $1$ and $N$, inclusive) with the other
    character ($A$ with
    $B$, $B$ with $A$).
Compute the least possible number of mutations that could
    convert the starting molecule to its end state (containing only
    $A$ characters). Mutations
    can occur in any order.
Input
The first line of input contains the positive integer
    $N$ ($1 \le N \le 1\, 000\, 000$), the
    length of the molecule. The second line of input contains a
    string with $N$
    characters, with each character being either $A$ or $B$. This string represents the
    starting state of the molecule.
Output
The first and only line of output must contain the required
    minimum number of mutations.


Sample Input 1
Sample Output 1



4
ABBA



2






Sample Input 2
Sample Output 2



5
BBABB



2






Sample Input 3
Sample Output 3



12
AAABBBAAABBB



4",4.8,Medium,1 second,1024 MB,,
Poplava,poplava,0.02,117,498,202,4.1,Medium,https://open.kattis.com/problems/poplava,"Mirko dreamt of a histogram last night that consists of
    $N$ columns. Each column
    is one meter wide and the heights of the columns in meters are
    $h_1, h_2, \ldots , h_
    N$.
The capacity of a histogram is the maximal amount of water
    that a histogram can hold so that the configuration of the
    water is “stable”, or, in other words, that it doesn’t move
    under the influence of gravity. Figure 1 depicts an
    example of a stable configuration.




Figure 1: Stable configuration of a histogram
        


Formally, let us denote the heights of water above the
    columns with $v_1, v_2, \ldots ,
    v_ N$. The configuration of the water is stable if the
    following holds:


$h_ i + v_ i \leq h_{i-1}
        + v_{i-1}$, for each $i > 2$ such that $v_ i > 0$


$h_ i + v_ i \leq h_{i+1}
        + v_{i+1}$, for each $i \leq N - 1$ such that
        $v_ i > 0$


$v_1 = 0$ and
        $v_ N = 0$


When Mirko woke up, he wanted to know whether he could
    somehow choose the heights of columns that are a permutation of
    the set $\{ 1, 2, \ldots , N \}
    $ such that the capacity of such histogram is equal to
    its lucky number $X$? Help
    Mirko and find one histogram that meets his requirements.
Input
The first line of input contains integers $N$ and $X$ ($1
    \leq N \leq 1\, 000\, 000$, $1 \leq X \leq 10^{15}$).
Output
If a histogram of capacity exactly $X$ does not exist, output -1. Otherwise, output numbers $h_1, h_2, \ldots , h_ N$ that meet
    the given requirements in the first line separated by space. If
    there are multiple such solutions, output any.


Sample Input 1
Sample Output 1




3 1




3 1 2






Sample Input 2
Sample Output 2




4 1




4 3 1 2






Sample Input 3
Sample Output 3




8 17




6 2 3 1 8 4 5 7",4.1,Medium,1 second,1024 MB,,
Ocean's Anti-11,anti11,0.0,57,4869,1799,2.4,Easy,https://open.kattis.com/problems/anti11,"Image by Liam Keliher and KeepCalmStudio.com


Note that this is an easier version of the problem
    anti11hard.
Danny Ocean likes many things: casinos, elaborate heists,
    and complicated romantic relationships. But it’s a little-known
    fact that Danny loves binary strings most of all — binary
    strings of any length and composition. Recently, however, he
    has developed an unfortunate allergy to binary strings
    containing the substring 11. He is optimistic that there are still
    plenty of other binary strings for him to enjoy, but he’s not
    sure exactly how many, so he has hired you to write a program
    to find out.
Input
The first line of input contains a single integer
    $T$ ($1 \leq T \leq 100$) representing the
    number of test cases. This is followed by $T$ lines, each of which contains a
    single integer $n$
    ($1 \leq n \leq 10\,
    000$).
Output
Output consists of $T$
    lines, one per case. The output for a given case is the number
    of binary strings of length $n$ that do not contain 11 as a substring.
    Since these values can be quite large, output each value mod
    $(10^9 + 7)$.


Sample Input 1
Sample Output 1




2
2
10




3
144",2.4,Easy,1 second,1024 MB,,
Quite a Problem,quiteaproblem,0.0,5,5918,2410,2.1,Easy,https://open.kattis.com/problems/quiteaproblem,"It gets tiring, looking for all ways in which the word
    ‘problem’ can be used (and mis-used) in the news media. And
    yet, that’s been your job for several years: looking through
    news stories for that word. Wouldn’t it be better if you could
    automate the process?
Input
Each line of input is one test case. Lines are at most 80
    characters long. There are at most 1000 lines of input. Input
    ends at end of file.
Output
For each line of input, print yes if the
    line contains ‘problem’, and no otherwise.
    Any capitalization of ‘problem’ counts as an occurrence.


Sample Input 1
Sample Output 1




Problematic pair programming
""There's a joke that pairs, like fish and house guests, go
rotten after three days,"" said Zach Brock, an engineering
manager.  Working out problems with a pairing partner can be
a lot like working out problems with a significant other.
During one recent rough patch, Jamie Kite, a developer, sat
her partner down for a talk. ""Hey, it feels like we're
driving in different directions,"" she recalls saying. ""It's
like any relationship,"" Ms.  Kite said. ""If you don't talk
about the problems, it's not going to work."" When those
timeouts don't solve the problem, partners can turn to
on-staff coaches who can help with counseling.  ""People who
have been pairing a while, they'll start acting like old
married couples,"" said Marc Phillips, one of the coaches.
People can be as much of a challenge as writing software.
(Excerpted from ""Computer Programmers Learn Tough Lesson in
Sharing""; Wall Street Journal, August 27, 2012)




yes
no
no
yes
yes
no
no
no
no
yes
yes
no
no
no
no
no
no",2.1,Easy,1 second,1024 MB,,
Staring Contest,boi23.staringcontest,0.01,526,1500,743,4.7,Medium,https://open.kattis.com/problems/boi23.staringcontest,"A staring contest is a classical battle of imperturbability
    in which two people stare into each other’s eyes while
    maintaining a facial expression of assured serenity. The goal
    is to maintain eye contact for longer than your opponent. The
    contest ends when one participant breaks composure, typically
    by looking away, smiling, speaking, or giggling.
As a coach of the national staring contest you need to
    determine the imperturbability of each of your team’s
    $n$ members for the
    upcoming world finals. The $i$th athlete can maintain eye contact
    for exactly $a_ i$
    seconds, but these values are unknown to you in the beginning.
    For instance, you could have a team of $n=3$ members:



$i$


Name


$a_ i$




1


Anna


431




2


Esther


623




3


Tony


121



When athletes $i$ and
    $j$ compete, the
    confrontation lasts exactly $\min
    (a_ i, a_ j)$ seconds, at which moment the weaker
    contestant breaks composure and both contestants start smiling
    and giggling within a fraction of a second. For instance, if
    Anna competes against Esther, the contest lasts for
    $431$ seconds.
    Importantly, to an outside observer the actual winner
    of the confrontation (in this case, Esther) is impossible to
    determine, only the duration of the contest is
    measurable.
Your goal is to estimate the values $a_1,\ldots , a_ n$ using as few
    staring contests as possible. Clearly, the strength of the
    strongest athlete can never be determined, so you are allowed
    to underestimate one of the $a_
    i$.
Interaction
This is an interactive problem. The interaction begins with
    you reading a single line containing the integer $n$. You may then ask queries of the
    form “? $i$ $j$” such that $1\leq i\leq n$ and $1\leq j\leq n$ and $i\neq j$. The response to a query is
    a single integer: the value $\min
    (a_ i, a_ j)$. The interaction ends with you printing a
    single line consisting of ! followed
    by $n$ estimates in the
    form of integers $b_1$,
    $\ldots $, $b_ n$, separated by spaces. This must
    be your final line of output.
Your submission is correct if $b_ i=a_ i$ for every
    contestant $i$ except
    one, which you may underestimate. To be precise, we require
    $b_ i\leq a_ i$ for all
    $1\leq i\leq n$ and allow
    $b_ k \neq a_ k$ for at
    most one $k$.
The interactor is non-adaptive, meaning that the
    $a_1,\ldots , a_ n$ are
    determined before the interaction begins.
Constraints and Scoring
The number $n$ of
    athletes satisfies $2\leq n\leq
    1500$. The imperturbability $a_ i$ of each athlete satisfies
    $1\leq a_ i\leq 86\, 400$,
    they are all different. You can use at most $3000$ queries; your final line
    of output, i.e., the line starting with !, is not counted as a query.
Your solution will be tested on a set of test groups, each
    worth a number of points. Each test group contains a set of
    test cases. To get the points for a test group you need to
    solve all test cases in the test group. Your final score will
    be the maximum score of a single submission.
For group $3$,
    your score is the minimum score among all test cases in the
    group. The score for each test case depends on the number of
    queries you use; fewer queries are better: Suppose you use
    $q$ queries. If
    $q \le n+25$, then you get
    the full $80$ points.
    If $q > 3000$, then you
    get no points. Otherwise, you get $118.2 - 12 \cdot \ln (q -
    n)$ points, rounded to the nearest integer. For
    instance, for $n = 1500$
    and $q = 3000$, you get
    $30$ points.



Group


Points


Constraints




$1$


$9$


$n\leq 50$




$2$


$11$


$n\leq 1000$




$3$


$0$–$80$


$1000 < n\leq
          1500$



Explanation of sample interactions
Sample interaction $1$
    shows a possible interaction using the above example. Note that
    Anna’s and Tony’s strengths are correctly determined. (Esther’s
    can never be determined.)


Read
Sample
        Interaction 1
Write



3


? 1 2


431


? 1 3


121


? 3 2


121


! 431 431 121",4.7,Medium,1 second,1024 MB,,
Splat,splat,0.0,155,1994,733,2.6,Easy,https://open.kattis.com/problems/splat,"The artist Jackson Pollock used to create works of art by,
    among other things, dripping paint onto the canvas. He died in
    1956, but, if he were alive today, he would probably appreciate
    some computational help in planning out his masterpieces.
We start with a large, white canvas. We let drops of paint
    fall onto the canvas one after another, letting each one dry
    before the next. Thus, successive drops paint over the color
    left by previous drops. When a drop of paint hits the canvas at
    point $p$, it spreads out
    to form a circle of uniform thickness centered at $p$. A drop of volume $v$ will spread out to a circle of
    radius $r$ where
    $v = \pi r^2$. Since
    underlying paint is already dry, all points a distance of
    $r$ or less from
    $p$ will be colored with
    the new drop’s color. Your job is to determine the final color
    of various points on the painting.
Input
Input begins with an integer $1 \le c \le 100$ indicating the
    number of painting descriptions which follow. Each painting
    description starts with an integer $1 \le n \le 100$ giving the number of
    paint drops that will be applied to the painting. This is
    followed by $n$ lines,
    each starting with three real numbers $X$, $Y$, and $V$ and a color. The location
    $(X, Y)$ is the location
    of the drop, and $V$ is
    its paint volume. The color is given as a string with
    $1$ to $20$ characters (a–z, either case).
    Each painting description is followed by a series of queries.
    The query list starts with an integer $1 \le m \le 100$, giving the number
    of queries. This is followed by $m$ lines, each containing a the
    $X$ and $Y$ coordinates of the query. All real
    values are in the range $[0, 1\,
    000]$ with at most $3$ digits after the decimal point.
    All queries fall somewhere on the canvas.
Output
For each query, output the color of the paint at that point
    on the canvas.


Sample Input 1
Sample Output 1




1
3
0 0 4 blue
2 3 8 red
4 3 10 green
3
1 0
2 2
6 6




blue
red
white",2.6,Easy,1 second,1024 MB,,
Forest of Celery,forestofcelery,0.05,2110,550,89,8.8,Hard,https://open.kattis.com/problems/forestofcelery,"Celery — the legendary Pokenom has been spotted in Alexa
    Forest.
To become the best Pokenom trainer, Bash has arrived at
    Alexa Forest to capture Celery. After lots of information
    gathering, Bash was able to draw a map of Alexa Forest, and
    noted down $K$ sightings
    of Celery.
Alexa Forest’s map is a convex polygon $A$ with $N$ vertices on the Cartesian plane.
    $K$ sightings of Celery
    can be considered as $K$
    points — all are strictly inside Alexa Forest.
Bash is ready to search Alexa Forest to find Celery.
    However, Bash realized that Alexa Forest is simply too big. It
    would take decades to search the entire forest. But Bash is
    smart. Based on his research, Bash knows that Celery can only
    be found inside a polygon $Z$, where the vertices of
    $Z$ are a subset of
    $A$, and all $K$ sightings of Celery must be
    strictly inside polygon $Z$.
Of course, there can be multiple polygons $Z$ satisfying the above conditions.
    Your task is to help Bash find the polygon $Z$ with smallest number of
    vertices.
Note
A point $P$ is strictly
    inside Polygon $A$, iff
    $P$ is inside $A$ and $P$ does not lie on the border of
    $A$.
Input


The first line of input contains a single positive
        integer $N$
$(3 \le N \le 2 \cdot
        10^5)$.


The next $N$ lines
        each contain $2$
        integers $x_ i$,
        $y_ i$ — the
        coordinates of the $i$-th vertex of Alexa Forest
        $(-10^9 \le x_ i, y_ i \le
        10^9)$. The vertices are listed in either clockwise
        or counterclockwise order. It is guaranteed that Alexa
        Forest is convex.


The next line contains a single positive integer
        $K$ $(1 \le K \le 10^5)$.


The next $K$ lines,
        each line contains $2$
        integers $x_ i$,
        $y_ i$ — the
        coordinates of a sighting of Celery $(-10^9 \le x_ i, y_ i \le 10^9)$.
        All points are guaranteed to be inside Alexa Forest and no
        points are on the border of Alexa Forest.


Output
Output a single integer — the smallest number of vertices of
    polygon $Z$.
Sample Clarification


In the first example, the only valid polygon satisfied
        is the whole Alexa Forest.


In the second example, there are two possible solutions
        with $4$ vertices:







Sample Input 1
Sample Output 1



4
0 0
0 3
3 3
3 0
2
1 1
2 2



4






Sample Input 2
Sample Output 2



8
3 0
7 0
10 3
10 7
7 10
3 10
0 7
0 3
11
1 3
3 3
5 3
7 3
9 3
3 5
5 5
7 5
5 7
7 7
7 9



4",8.8,Hard,1 second,1024 MB,,
Simple Addition,simpleaddition,0.0,5,11303,4566,3.0,Medium,https://open.kattis.com/problems/simpleaddition,"Yup, yet another trivial problem. You just have to add two
    integers! Oh, not easy enough? Sure, let’s say that they’re
    positive as well. Now it should be trivial, right?
Input
The input consists of two lines, each containing a positive
    integer less than $10^{10\,
    000}$. Oh right…I forgot to mention that the integers
    can be quite large.
Output
One line containing the sum of the two integers.


Sample Input 1
Sample Output 1




1337
42




1379






Sample Input 2
Sample Output 2




1
9999999999999




10000000000000",3.0,Medium,1 second,1024 MB,,
Greedy Polygons Revisited,greedypolygons2,0.0,408,418,146,5.3,Medium,https://open.kattis.com/problems/greedypolygons2,"MAPS 2020 included a problem named “Greedy Polygons”
    that described a dystopian world in which the greed that often
    characterizes human nature had spread to regular polygons,
    causing these normally well-behaved shapes to exhibit
    expansionistic tendencies. Now, as feared, this avarice has
    advanced further, infecting all convex polygons.
In the past, the area of a convex polygon was fixed, but
    now, whenever it gets the chance, a convex polygon will carry
    out an expansion operation informally known as a “land grab.” A
    land grab with expansion distance $d > 0$ works as follows: every
    point outside the polygon that is at most
    distance $d$ from
    some point in the polygon is absorbed and becomes part of the
    enlarged polygon. (For our purposes, a polygon includes its
    interior, i.e., it is a solid shape.) Over time, a convex
    polygon might carry out many land grabs. (Technically, a convex
    polygon ceases to be a convex polygon (or any kind of polygon
    at all) after the first land grab, but, alas, such is the
    distorting effect of greed.)
Given an initial convex polygon and an expansion
    distance $d$, what is
    the area of the resulting region after a specified number of
    land grabs?
Figure $1$ depicts
    Sample Input $1$,
    which describes a $5$-sided convex polygon that carries
    out $2$ land
    grabs.




Figure 1: Illustration of Sample
          Input $1$



Input
The first line of input contains three space-separated
    integers, $n, d, g$, where
    $n$ is the number of
    convex polygon vertices $(3 \leq
    n \leq 60)$, $d$ is
    the expansion distance $(1 \leq d
    \leq 10)$, and $g$
    is the number of land grabs $(0
    \leq g \leq 20)$. This is followed by $n$ lines, each of which contains
    two space-separated integers, the $x$ and $y$ coordinates, respectively, of one
    of the polygon vertices. Each coordinate is in the interval
    $[-1\, 000, 1\, 000]$. The
    $n$ vertices are distinct,
    and are given in no particular order. It is guaranteed that
    no $3$ vertices are
    collinear.
Output
Output the area of the region occupied by the convex polygon
    after $g$ land grabs. Your
    answer will be considered correct if it is within $10^{-3}$ of the official answer.


Sample Input 1
Sample Output 1



5 1 2
0 4
2 2
2 -2
-2 -2
-2 2



67.88007911334394",5.3,Medium,1 second,1024 MB,,
Pokémon Ice Maze,pokemon,0.1,820,368,115,7.0,Hard,https://open.kattis.com/problems/pokemon,"You are hired as a level designer for the next Pokémon
    series, with games called Ice and Fire. For
    the first of these two games, players have to get through a
    maze in an icy cave. The cave is represented as a grid, with
    each square of the grid being either ice, gravel or an
    obstacle.
The player will start at a square, and then make a number of
    moves, each move represented by one of the four cardinal
    directions. The maze behaves in the following way. Assume that
    the square the player is trying to move into is an obstacle. In
    this case, the player does not move. If the square the player
    is moving into is gravel, the player successfully moves to the
    square and will stand still on the square. If the square is ice
    however, the player will first be transferred into that square,
    and then repeat the procedure again in the same direction. This
    means the player will glide on the ice until either colliding
    with an obstacle or reaching a square filled with gravel.
    Gliding on ice counts only as one move.
You have almost finished your level design. In the maze,
    there is a goal square that you wish to reach. You still have
    to choose a square to be the starting point of the player.
    Since you do not want the level to be too easy, you want to
    make sure the number of moves needed to get from the starting
    point to the goal is sufficiently high.
Can you compute the minimum number of moves needed
    to get from each point in the maze to the goal? Note that move
    may result in the player traveling multiple squares if gliding
    on the ice.
Input
The first line of the input contains the two integers
    $3 \le C \le 1\, 000$ and
    $3 \le R \le 1\, 000$, the
    number of columns and rows that the maze consists of.
The next $R$ lines
    contains $C$ characters
    each, describing the maze. Each square in the maze is
    represented by one of the following characters:


a period (.) represents a
        gravel square


a pound sign (#) represents an
        obstacle


an underscore (_) represents
        an ice square


an M (M) represents the goal
        in the maze, which is also covered in gravel


The edges of the maze are always surrounded by obstacle
    squares.
Output
Output $R$ lines with
    $C$ integers each, one for
    each square, containing the number of moves needed to reach the
    goal.
If it is not possible to reach the target from a square,
    output $-1$ instead for
    that square.


Sample Input 1
Sample Output 1



5 6
#####
#...#
#_###
#_M.#
#__.#
#####



-1 -1 -1 -1 -1
-1 4 5 6 -1
-1 4 -1 -1 -1
-1 1 0 1 -1
-1 3 1 2 -1
-1 -1 -1 -1 -1






Sample Input 2
Sample Output 2



5 6
#####
##__#
##__#
##M_#
##_##
#####



-1 -1 -1 -1 -1
-1 -1 1 2 -1
-1 -1 1 2 -1
-1 -1 0 1 -1
-1 -1 1 -1 -1
-1 -1 -1 -1 -1",7.0,Hard,2 seconds,1024 MB,,
Evolutions,evolutions,0.01,584,267,73,6.2,Hard,https://open.kattis.com/problems/evolutions,"In order to become the very best Pokenom trainer, Bash is
    studying Pokenom’s evolutions.
Each Pokenom has a combat power ($CP$), indicating how strong the
    Pokenom is. After certain amount of training, a Pokenom can
    evolve, and the evolved Pokenom will have higher $CP$. A Pokenom can evolve multiple
    times. There is no known limit on how many times a Pokenom can
    evolve.



When a Pokenom evolves, his $CP$ always increases by a constant
    ratio.
More formally, let’s $CP_
    i$ denotes the $CP$
    of the Pokenom after it evolved $i$ times. If the Pokenom evolves
    $k$ times, then the
    following conditions must be true:


$CP_0 < CP_1$ or
        $k < 1$,


$\frac{CP_1}{CP_0} =
        \frac{CP_2}{CP_1} = \cdots = \frac{CP_
        k}{CP_{k-1}}$,


$CP_ i$ is a
        positive integer.


A sequence is called CP-sequence if it satisfies the above
    conditions. For example:


$1, 2, 4, 8, 16$ is
        a CP-sequence.


$4, 6, 9$ is a
        CP-sequence.


$4, 2, 1$ is NOT a
        CP-sequence, because $4 >
        2$.


$4, 6, 9, 13.5$ is
        NOT a CP-sequence, because $13.5$ is not an integer.


$4, 6, 9, 13$ is
        NOT a CP-sequence, because $\frac{13}{9} \ne
        \frac{9}{6}$.


Bash is very excited to learn about CP-sequences. Given an
    integer $S$, he wants to
    know how many CP-sequences there are whose sum equals
    $S$.
For example, when $S =
    7$, there are $5$
    CP-sequences: $(7), (1, 6), (2,
    5), (3, 4), (1, 2, 4)$. When $S = 19$, there are $11$ sequences: $(19), (1, 18), (2, 17), \ldots , (9, 10),
    (4, 6, 9)$.
Input


The first line contains one integer $t$ $(1 \leq t \leq 1\, 000)$.


The second line contains $t$ distinct integers $S_{1}, S_{2}, \ldots , S_{t}$
$(1 \leq S_{i} \leq 10^{6}~
        \forall 1 \leq i \leq t)$.


Output
Print $t$ integers in
    one line, the $i$-th
    number should be the answer to the problem when $S = S_{i}$.


Sample Input 1
Sample Output 1



7
3 5 7 11 13 17 19



2 3 5 6 8 9 11",6.2,Hard,1 second,1024 MB,,
Ticket Lottery,lottery,0.0,120,404,77,4.9,Medium,https://open.kattis.com/problems/lottery,"Picture in Public Domain via Wikimedia Commons
      
You and your friends are in New York and are planning to
    go see a broadway musical. Unfortunately, New York being New
    York, the tickets are just a tiny bit expensive. But one of the
    shows has a ticket lottery each night where impecunious people
    such as yourself have a chance to win the right to buy slightly
    less expensive tickets to good seats.

    The lottery operates as follows. First, everyone interested
    enters the lottery. Then, $n$ lucky winners are drawn, and each
    of these is offered to buy up to $t$ tickets.
Given the number of people $p$ in your group (all of which
    entered the lottery) and the total number of people
    $m$ that entered the
    lottery, what is the probability that you will be able to get
    tickets for your entire group? Assume that the $n$ lucky winners are chosen uniformly
    at random from the $m$
    people that entered the lottery, and that each person can win
    at most once.
Input
The input consists of a single line containing four
    integers:


$1 \le m \le 1000$:
        the total number of people who entered the lottery.


$1 \le n \le m$:
        the total number of winners drawn.


$1 \le t \le 100$:
        the number of tickets each winner is allowed to buy.


$1 \le p \le m$:
        the number of people in your group.


Output
Output a single line containing the probability that your
    entire group can get tickets to the show. This probability
    should be given with an absolute error of at most $10^{-9}$.


Sample Input 1
Sample Output 1




100 10 2 1




0.1






Sample Input 2
Sample Output 2




100 10 2 2




0.1909090909






Sample Input 3
Sample Output 3




10 10 5 1




1.0000000000",4.9,Medium,1 second,1024 MB,,
Association of Computer Maintenance,maintenance,0.03,1613,1130,108,8.5,Hard,https://open.kattis.com/problems/maintenance,"In order to keep up with the rapid technological
    advancements, Mr. Panda needs to backup all the data on his
    computer to allow him to do a full upgrade of his computer.
    Since the upgrade will take some time, he will peruse the
    services of the company ACM
    (Association of Computer Maintenance) that provides storage
    servers for him to temporarily store his data.
Although ACM offers storage
    servers of any size, ACM wants to
    encourage more bulk purchases of servers of the same size as
    this saves cost. The cost of purchasing a set of storage
    servers that can each store $M$ bytes consists of a base cost of
    $M$ dollars plus
    $1$ dollar for every
    server of that size purchased.
Mr. Panda wants to store a total of $K$ bytes of data and in order to
    easily track the servers, he wants to purchase a set of storage
    servers of the same size to store the $K$ bytes of data using the least
    cost. However, Mr. Panda feels compelled not to waste any
    space. Thus, he requires that the total storage space of the
    servers purchased must be exactly $K$ bytes.
As storage space of technology increases exponentially with
    time, $K$ can be very
    large. You are given the prime factorization of $K$. Help Mr. Panda calculate the
    minimum cost required to store his data. As the minimum cost
    can be quite large, print the minimum cost modulo a prime
    number $10^9+7$.
Input
The input consists of one line with a string of even length
    consisting of at most $700$ representing the prime
    factorization of $K$.
    Every pair of two consecutive digits, starting from the first
    two digits, represents one prime factor. So input of length
    $N$ will have $N/2$ prime factors.
It is guaranteed that all the prime factors given are prime
    and that $K$ has at most
    $10^{10}$ divisors. Each
    prime factor will appear at most $100$ times.
Output
Output the minimum cost in one line as a single integer.
Sample Data Explanation
In the first example, $K = 2
    \cdot 3 \cdot 2 = 12$, so buy three servers with
    $M = 4$ bytes. Mr. Panda
    pays $4$ dollars base cost
    plus $3$ dollars for three
    servers purchased, or a total of $4+3 = 7$ dollars. Mr. Panda can also
    buy four servers with $M =
    3$ bytes with the same cost of $7$ dollars.
In the second example, $K = 13
    \cdot 11 = 143$, so buy eleven servers with $M = 13$ bytes. Mr. Panda pays
    $13$ dollars base cost
    plus $11$ dollars for
    eleven servers purchased, or a total $13+11 = 24$ dollars. Mr. Panda can
    also buy thirteen servers with $M
    = 11$ bytes with the same cost of $24$ dollars.
In the third example, $K =
    11$, so buy one server with $M = 11$ bytes. Mr. Panda pays
    $11$ dollars base cost
    plus $1$ dollar for one
    server purchased, or a total $11+1 = 12$ dollars. Note that
    although he can get a cheaper cost if he were able to purchase
    storage servers of different sizes, he cannot do so.


Sample Input 1
Sample Output 1




020302




7






Sample Input 2
Sample Output 2




1311




24






Sample Input 3
Sample Output 3




11




12",8.5,Hard,1 second,1024 MB,,
Hubtown,hubtown,0.13,2378,772,118,8.5,Hard,https://open.kattis.com/problems/hubtown,"Hubtown is a large Nordic city which is home to $n$ citizens. Every morning, each of
    its citizens wants to travel to the central hub from which the
    city gets its name, by using one of the $m$ commuter trains which pass through
    the city. Each train line is a ray (i.e., a line segment which
    extends infinitely long in one direction), ending at the
    central hub, which is located at coordinates $(0, 0)$. However, the train lines
    have limited capacity (which may vary between train lines), so
    some train lines may become full, leading to citizens taking
    their cars instead of commuting. The city council wishes to
    minimize the number of people who go by car. In order to do
    this, they will issue instructions stating which citizens are
    allowed to take which train.
A citizen will always take the train line which is of least
    angular distance from its house. However, if a citizen is
    exactly in the middle between two train lines, they are willing
    to take either of them, and city council can decide which of
    the two train lines the citizen should use. See Figure 1
    for an example.




Figure 1: Illustration of Sample Input 1. The
          dashed arrows indicate which train lines the citizens are
          closest to (note that we are measuring angular distances,
          not Euclidean distance).
        


Your task is to help the council, by finding a maximum size
    subset of citizens who can go by train in the morning to the
    central hub, ensuring that each of the citizens take one of the
    lines they are closest to, while not exceeding the capacity of
    any train line. For this subset, you should also print what
    train they are to take.
Input
The first line of input contains two integers $n$ and $m$, where $0 \le n \le 200\, 000$ is the number
    of citizens, and $1 \le m \le
    200\, 000$ is the number of train lines.
The next $n$ lines each
    contain two integers $x$
    and $y$, the Cartesian
    coordinates of a citizen’s home. No citizen lives at the
    central hub of the city.
Then follow $m$ lines,
    each containing three integers $x$, $y$, and $c$ describing a train line, where
    $(x, y)$ are the
    coordinates of a single point (distinct from the central hub of
    the city) which the train line passes through and $0 \le c \le n$ is the capacity of the
    train line. The train line is the ray starting at $(0, 0)$ and passing through
    $(x, y)$.
All coordinates $x$ and
    $y$ (both citizens’ homes
    and the points defining the train lines) are bounded by
    $1000$ in absolute value.
    No two train lines overlap, but multiple citizens may live at
    the same coordinates.
Output
First, output a single integer $s$ – the maximum number of citizens
    who can go by train. Then, output $s$ lines, one for each citizen that
    goes by train. On each line, output the index of the citizen
    followed by the index of the train line the citizen takes. The
    citizens are numbered from $0$ to $n-1$ in the order they are given in
    the input. The trains are numbered from $0$ to $m-1$ in the order they are given in
    the input. The output lines may be given in any order.


Sample Input 1
Sample Output 1




3 2
2 0
-1 0
-2 -1
1 -1 1
1 1 2




3
0 1
1 1
2 0






Sample Input 2
Sample Output 2




6 3
1 1
1 1
1 1
-1 1
-1 1
0 1
-1 0 2
0 1 2
1 0 2




6
0 2
1 2
2 1
5 1
3 0
4 0",8.5,Hard,6 seconds,1024 MB,,
Jurassic Jigsaw,jurassicjigsaw,0.0,657,1296,739,2.3,Easy,https://open.kattis.com/problems/jurassicjigsaw,"Image from 
        https://pixabay.com/en/animal-cartoon-comic-dinosaur-1295637/.
      

The famous Jurassic park biologist Dean O’Saur has
    discovered new samples of what he expects to be the DNA of a
    dinosaur. With the help of his assistant Petra Dactil, he
    managed to sequence the samples, and now they are ready for
    analysis. Dean thinks this dinosaur was affected with a
    particular disease that mutated the DNA of some cells.
To verify his theory, he needs to compute the most likely
    evolutionary tree from the samples, where the nodes
    are the samples of DNA. Because there is no temporal data for
    the DNA samples, he is not concerned where the root of the tree
    is.
Dean considers the most likely evolutionary tree, the tree
    with smallest unlikeliness: the unlikeliness of a tree
    is defined as the sum of the weights of all edges, where the
    weight of an edge is the number of positions at which the two
    DNA strings are different.
As a world expert in data trees, he asks you to reconstruct
    the most likely evolutionary tree.
In the first sample, the optimal tree is AA - AT - TT - TC . The unlikeliness of the
    edge between AA and AT edge is $1$, because the strings AA and AT differ in
    exactly $1$ position. The
    weights of the other two edges are also $1$, so that the unlikeliness of the
    entire tree is $3$. Since
    there is no tree of unlikeliness less than $3$, the minimal unlikeliness of an
    evolutionary tree for this case is $3$.
Input


The first line consists of two integers $1\leq n\leq 1\, 000$ and
        $1\leq k\leq 10$, the
        number of samples and the length of each sample
        respectively.


Each of the next $n$ lines contains a string of
        length $k$ consisting
        of the characters in ACTG.


Output


On the first line, print the minimal unlikeliness of the
        evolutionary tree.


Then, print $n-1$
        lines, each consisting of two integers $0\leq u,v < n$, indicating
        that in the most likely evolutionary tree, there is an edge
        between DNA string $u$
        and $v$. If there are
        multiple answers possible, any of them will be
        accepted.




Sample Input 1
Sample Output 1



4 2
AA
AT
TT
TC



3
0 1
1 2
2 3






Sample Input 2
Sample Output 2



4 1
A
A
G
T



2
0 1
0 2
0 3






Sample Input 3
Sample Output 3



5 6
GAACAG
AAAAAA
AACATA
GAAAAG
ATAAAT



7
0 3
1 2
1 3
1 4",2.3,Easy,2 seconds,1024 MB,,
