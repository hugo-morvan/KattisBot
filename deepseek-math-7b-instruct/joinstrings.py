 import sys
def solve():
    n = int(input())  # number of strings given (without quotes)
    
# read all input string into a list S, convert each character to lowercase for consistency and remove newline characters (\n) from the end using strip() method. Also store lengths in L as we will need them later when calculating total length constraint is satisfied by concatination operation or not  (without quotes). Note that python automatically converts numbers entered at command prompt into integers if possible
    S = [input().lower().strip('\n') for _i in range(0, n)] # this line creates a list of strings with each string being the input from stdin converted to lower case and removing newline character (\n) using strip method.  Note that python automatically converts numbers entered at command prompt into integers if possible
    L = [len(S[j]) for j in range (0, n)] # this line creates a list of lengths called "L" with each element being the length of corresponding string from S and note we need these later to check total lenght constraint. Note that python automatically converts numbers entered at command prompt into integers if possible
    
    operations = []  # initialize an empty list for future operation pairs (a, b) where a !=b , without quotes initially as there are no inputs yet and its size is zero .Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
    
# read each of next N-1 lines containing two integers (a, b) separated by a single space where ‘$’ denotes start and end of input values for python , without quotes: Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
    while True: # this is an infinite loop until break condition set as EOF (end-of file) encountered, which happens when no more lines of input are given after initial N strings and their lengths 
        try:  
            operation = tuple(map(int,input().split())) # each line read in split by single space into two integers a , b where '$' denotes start/end delimiter for python map function. Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
            operations.append(operation)# add each tuple (a,b ) operation to our futureOperations set without quotes  as we need a collection of such tuples for further processing and calculations later on   . Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
        except: # this catches any exception (eg ValueError if an integer cannot parse) encountered during input operation which terminates loop here, effectively ending program execution once all operations are read and added to our set of futureOperations  without quotes as needed for further processing. Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
        except:
            break   # this catches any exception (eg ValueError if an integer cannot parse) encountered during input operation which terminates loop here, effectively ending program execution once all operations are read and added to our set of futureOperations without quotes as needed for further processing. Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
    
    total_length = sum(L) # initialise a variable with current lengths constraint based on all strings read so far without quotes as we need this later to check if any operation causes violation of length constarint .Note that python automatically converts numbers entered at command prompt into integers if possible  and Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
    
    for a, b in sorted(operations)[::-1]: # this loop iterates over our futureOperations set of tuples (a ,b) where operation pairs are ordered descendingly based on their corresponding integer values without quotes and Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
        total_length -= L[b-1] # subtract length of string b (from each future operation) to our current constraint until we reach end, effectively simulating removal and concatenation operations on strings S without quotes as needed for further processing .Note that python automatically converts numbers entered at command prompt into integers if possible 
        combined_length = L[a-1] + total_length # calculate new length after performing operation (concatination) between a & b in the original set of string lengths and Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
        if combined_length < 1: break; continue    # check for violation against length constraint (sum <= max) without quotes as needed .Note that python automatically converts numbers entered at command prompt into integers if possible   and Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
        total_length = combined_length # update current constraint with new value after performing operation without quotes as needed for further processing .Note that python automatically converts numbers entered at command prompt into integers if possible  and Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
    
    print(S[sorted([b-1for a, b in operations])[-1]]) # this line prints final string which remains after performing all futureOperations on S without quotes as needed .Note that python automatically converts numbers entered at command prompt into integers if possible  and Note :python starts indexing lists from position '0' by default. So first item in the list will be at index "0"
# Generator time: 30.8907 seconds