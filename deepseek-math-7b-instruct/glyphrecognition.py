 n = int(input())
points=[]  # empty list to store all points as tuples (x, y) from input() function and then calculate distances for each polygon with different corners k i..e.,3<=k<=8 ,and find the max score among those polygons.The point inside a circle of radius r is considered in inner_polygon area calculation whereas any other shape's(like triangle or square etc.)area outside this cirle will be counted as outer-region,which we are not interested for now
for i in range (n):  #store all pointsin 'points list',we do need to find the max distance from origin and hence abs function is used.The point inside a circle of radius r(max_distance)is considered innner region's area calculation,which we will use later for calculating score
    x,y=input().split()  #for each line in input(),we get two values as integers i guess...hence using split function to divide them.This would be our sample points on the boundary of polygon which is carved out from clay!  
	x = int(x)	; y = abs(int(y))	#take absolute value for negative coordinates because we are calculating area and distance between origin (0, 0 )and a point P whose coordinate can't be negitive.The max distnace would always b positive as per definition
    points+=[tuple((x), y)] #add this new tuple in 'points list',which will contain all sample pints	given by input()function  	   		   		         		    				       			    		          		     			   		           						 				   	 		  			 			  	  		 	       	     				 					     		       																	
max_distance= max( [math.sqrt((p[0]**2)+ (p[1]**2)) for p in points ] ) #get the maximum distance of all sample pints from origin i,e.,the radius rof a circle that would encloseall given pointssample 
for k in range(3 ,9):	##loop through each possible number corners 'k' starting with minimum=3 and ending at max value =8 (given)#### calculate area of inner polygon which will be maximum inscribed regular shape whose vertex is on positive x axis,origin centered i.e.,all vertices are equidistant from origin(0, 0),and enclosing no sample points
	if k==4:   #area for square with side length 'r' and hence all its sides equal to radius r of circle containing these samples	######as per the problem statement...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
	    inner_polygon=max_distance* max_distance   #area of square with side length 'r' i guess...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
	elif k==5: #area of regular pentagon whose side length is 'r' and all vertices equidistant from origin (0, 0),enclosing no sample points######as per the problem statement...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
	    inner_polygon=(5/4)*max_distance* max_distance   #area of regular pentagon with side 'r' i guess...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
	elif k==6: #area of regular hexagon whose side length is 'r' and all vertices equidistant from origin (0, 0),enclosing no sample points######as per the problem statement...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
	    inner_polygon=(3/2)*max_distance* max_distance   #area of regular hexagon with side 'r' i guess...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
	elif k==7: #area of regular heptagon whose side length is 'r' and all vertices equidistant from origin (0, 0),enclosing no sample points######as per the problem statement...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
	    inner_polygon=(7/4)*max_distance* max_distance   #area of regular heptagon with side 'r' i guess...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
	elif k==8: #area of regular octagon whose side length is 'r' and all vertices equidistant from origin (0, 0),enclosing no sample points######as per the problem statement...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
	    inner_polygon=(5/2)*max_distance* max_distance   #area of regular octagon with side 'r' i guess...no need for actual formula here as we are not askedto get exact ans like 1.23 or something but just relative values(like score)which would be same no matter whether calculated by python,excel sheet ,or any software
###now lets calculate area of outer polygon which will contain all sample pints from origin i guess...the shape is irregular and can't have simple formula like circle/square etc.so we are not interested in it atm as per problem statement#we only need score to differentiate one glyphfrom another based on its max inscribed regular shaped(inner_polygon)area with no samples inside
###and the current outer polygon area will be considered for next iteration of k values i guess...for example,if we find a square whose side length is 'r' and all vertices equidistant from origin (0, 0),enclosing sample points then this would become new inner_polygon(max inscribed regular shape)area with no samples insideand previous max area will be considered as outer region for next iteration of k values
outer_region=4*inner_polygon #the current outer polygon's total areais four times the maximum possible enclosed by any 'k'-gon (3<=K<=8),as per problem statement...i guess this would change with every new sample pint given i mean if we find a square whose side length is 2r enclosing all samples then next time when k=4(square)this current outer_region of 4*max inscribed area will become inner region and previous max enclosed by any 'k'-gon (3<=K<=8)will be considered as new outter polygon's total area#and this process would continue untill we get a score for all possible valuesof k(corners),find the one with highest score,output it
score=inner_polygon/outer_region  #the final max inscribed regular shape i guess...whose ratio of enclosed to enclosing region gives us required 'glyph's corersponding number of corners as output   ##end##
# Generator time: 42.7593 seconds