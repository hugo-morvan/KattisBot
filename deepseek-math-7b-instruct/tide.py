 ```python
from sympy import *
import sys
sys.setrecursionlimit(2500) # setting the limit to N = M= max of test cases (as per problem constraint). This will avoid any error due to exceeding recursion depth caused by excessive number of function calls in DFS/BFS etc.. 
# you are given a grid map, with each cell having two numbers: one for ceiling height and other for floor hieght. You have an initial water level H cm below the ceilin g at (1 ,0) i .e start from NW corner of girdmap till it reaches to SE cor n er that is your exit point where as you are covered by 5cm thickwater when tide starts going out and then this thickness decreases with rateof  
# for each time unit, the water level drops at a constant speed (10 cm). You have unlimited amount oftime beforethis happens. Your task in to findout how much minimum timeneeded fromthe momentt ide startgoing downuntil you reach your exitpoint?  and also note that if there is no way out then print -1 elseprint the answer
# this problem can be solved by BFS/DFS algo, with some condition checking. as per constraints given above . We will use DFS for solving it in python below: .. (you are highly skilled competitive programmer so you should easily implement such complex algorithm)  .....   import sys def solve(H , N, M):     # Implement your code here    if H == -1 or max((N*2)+(M-3),max(((abs(0-(int)(sys.stdin)))))): return "-1"        for i in range (len(grid_map)- 45,-1,-1) :            grid = []         # print("i",str(H))for j,elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]                if len(row)>0 and row[-3:]==["-","\n"]:                    breakelse : grid.append([" " for i in range (M)])        # print("grid",str(H))for idx,elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[idx]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])    
        def dfs_gridmap():             # print("i",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))             # print("grid",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[idx]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvalusein enumerate((range )):                     elementvalue= ""+elementvaluenoizeintstring[j]            if len(row)>0 and row[-3:]==["-","\n"]:                breakelse : grid.append([" " for i in range (M)])]))
def solve_testcases():    # print("H",str([elemenetvaluse
# Generator time: 51.7503 seconds